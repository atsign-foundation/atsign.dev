<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Build end-to-end encrypted apps quickly on the @platform – The @platform documentation</title><link>https://devstaging.atsign.wtf/docs/</link><description>Recent content in The @platform documentation on Build end-to-end encrypted apps quickly on the @platform</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://devstaging.atsign.wtf/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Namespaces</title><link>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/namespaces/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/namespaces/</guid><description>
&lt;p>Namespace is a common term that may occur when reading about the @platform. Luckily for you, we briefly explain what a namespace is here!&lt;/p>
&lt;p>As our CTO, Colin Constable, delicately described it, &amp;quot; A namespace is a place to put a set of strings or characters together.&amp;quot; So how exactly is this relevant to our end-to-end encryption protocol?&lt;/p>
&lt;p>Most people are familiar with DNS (Domain Name System): for example, if you type “cnn.com”, “fox.com”, or “bbc.com”, you get news sites. But you can’t just type in “news” and expect the Internet to tell you which particular flavor of news you want.&lt;/p>
&lt;p>We need to create namespaces so that humans can remember the name and computers can translate it to Internet protocol. Once there is a namespace like “bbc.com,” you can reliably know that somebody owns that particular space, and it needs to be managed so that there are no clashes.&lt;/p>
&lt;p>For instance, you don’t want to type “bbc.com” and get sent to Amazon’s home page. That’s why they have to be unique.&lt;/p>
&lt;p>Feel free to read more on namespaces &lt;a href="https://atsigncompany.medium.com/the-hidden-beauty-of-protocol-namespaces-6f5fab7f7a09">here&lt;/a>.&lt;/p>
&lt;!-- ## Getting @signs and keys.
Your first step is to get a couple of @signs, it is best to get at least two, so you can experiment with sharing end-to-end
encrypted data across the @platform.
### There are two methods to get @signs.
#### The first
Go to [atsign.com](https://atsign.com) and clicking [Get an @sign](https://atsign.com/get-an-sign/). If you go
this route then you have more influence on your free @sign or pay for one of your choosing. Once you have your @signs,
do not forget to activate them.
![activate @sign](/docs/Get-Started/get-an-atsign/images/activate-ui.png)
Activating creates a microservice (we call the secondary server) and once
that is spun up on Atsign infrastructure you will see a QR-Code to scan with an @ enabled application.
![activated @sign](/docs/Get-Started/get-an-atsign/images/activated.png)
The pairing consists of your device creating cryptographic
keys and sharing the public keys to the secondary server, you will be asked to store your private keys.
Storing your keys is vitally important as only you have the keys.
#### The second
The experience of getting a @sign via the website is great for developers as you have advanced options available, to reset
@signs and to point your @sign to your own infrastructure. For getting people onboarded quickly, a better experience would
be to get a free @sign within the app itself, this is option 2.
![generate @sign](/docs/Get-Started/get-an-atsign/images/generate-free-@sign.png)
The [onboarding widget](https://pub.dev/packages/at_onboarding_flutter) together with an API key provides a button
marked "Generate Free @sign".
![generate @sign-pair](/docs/Get-Started/get-an-atsign/images/generate-free-@sign-pair.png)
When selected a number of free @signs given to chose from, once selected it is quickly activated,
then once again you will be asked to store the cryptographic keys for the @sign.
### Once you have your @signs and keys
You are ready to start using the @platform! We have a number [demo apps](https://github.com/atsign-foundation/at_demos) that are constantly being updated, feel free to
fork or clone and try them.
There is also another nice app in development by [xavierchanth](https://github.com/XavierChanth/chit_chat) which is a
chat app using the @platform. It is a nice example to follow as it uses the [contacts](https://pub.dev/packages/at_contact)
combined with the [at_chat_flutter](https://pub.dev/packages/at_chat_flutter) widgets to create a simple chat app between
@signs.
![ChitCh@t](/docs/Get-Started/get-an-atsign/images/ChitCh@t-low.png)
Each @ enabled application will ask you once for your @sign and then your keys, so it can synchronize with your secondary server.
This means you might like to store your keys on a personal network drive or service (e.g. gdrive/idrive/onedrive) so
you can connect other @ enabled apps to your @sign easily. Remember not to share and protect your keys.
### Other widgets and the @platform/@protocol source code
We have an ever-growing number of widgets on [pub.dev](https://pub.dev/publishers/atsign.org/packages)
The @plaform and the @protocol are open source projects on [GitHub](https://github.com/atsign-foundation). If you see something missing,
or not working let us know or better still contribute with a PR!
## Where should I go next?
First, if you haven't setup Flutter, do that [here](/docs/get-started/setup-your-env/).
Otherwise, continue to building your first app [here](/docs/get-started/create-a-project/). --></description></item><item><title>Docs: Dart packages</title><link>https://devstaging.atsign.wtf/docs/packages/dart/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/packages/dart/</guid><description>
&lt;h3 id="at_app">at_app&lt;/h3>
&lt;p>A command line tool to help developers build an @ platform application.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_app">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_app_templates">at_app_templates&lt;/h3>
&lt;p>Flutter app templates built using the @platform that can be generated using the at_app package.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_app_templates">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_client">at_client&lt;/h3>
&lt;p>The at_client library is the non-platform specific Client SDK which provides the essential methods for building an app using the @protocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_client">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_client_mobile">at_client_mobile&lt;/h3>
&lt;p>A Flutter extension to the at_client library which adds support for mobile, desktop and IoT devices.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_client_mobile">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_lookup">at_lookup&lt;/h3>
&lt;p>A Dart library that contains the core commands that can be used with a secondary server (scan, update, lookup, llookup, plookup, etc.)&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_lookup">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_persistence_secondary_server">at_persistence_secondary_server&lt;/h3>
&lt;p>A Dart library with the implementation classes for the persistence layer of the secondary server.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_persistence_secondary_server">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: SnackBar</title><link>https://devstaging.atsign.wtf/docs/sample_apps/snackbar/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/sample_apps/snackbar/</guid><description>
&lt;p>SnackBar is a simple end-to-end encrypted application that allows for securely sending snacks (chocolate bars!) to a receiving @sign. Below is the step-by-step process that will assist you in getting the SnackBar application up and running.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Note: This application demo works with two devices. A connected physical device and an emulator is suitable for this demo as well.&lt;/p>
&lt;/div>
&lt;h3 id="1-get-snackbar-running-on-your-machine">1. Get SnackBar Running on your Machine&lt;/h3>
&lt;p>You are able to download application templates from our at_app project! Copy and paste the following code in your terminal to activate at_app on your machine:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">dart pub global activate at_app
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="pageinfo pageinfo-primary">
&lt;h3> Important note!
&lt;/h3>
&lt;h5>Verify your system PATH variable&lt;/h5>
&lt;p>When you run the command above, it may prompt you that the pub cache bin is missing from the system PATH variable.
The prompts will tell you the appropriate steps to add it to the PATH variable.
Please complete this step before continuing.&lt;/p>
&lt;/div>
&lt;p>After successfully activating at_app on your machine, simply change directories to where you wish to have your snackbar application exist. After having your desired directory active, copy and paste the following command into your terminal:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">at_app create -d snackbar ...
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Note: Replace the above &amp;ldquo;&amp;hellip;&amp;rdquo; with the folder name you wish for the snackbar application to be built within.&lt;/p>
&lt;/div>
&lt;p>After creating the snackbar application, run the project on your physical device or emulator using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#204a87">cd&lt;/span> ...
flutter run
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Note: Replace the above &amp;ldquo;&amp;hellip;&amp;rdquo; with the folder name you built the snackbar application.&lt;/p>
&lt;/div>
&lt;h3 id="2-understand-how-snackbar-works">2. Understand how SnackBar Works&lt;/h3>
&lt;p>The first thing you will see when the SnackBar application is built and running on your device is the Onboarding screen.&lt;/p>
&lt;center>
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/onboardScreen.png" style="height:520px;">&lt;/img>
&lt;/center>
&lt;h4 id="how-does-onboarding-work">How does Onboarding work?&lt;/h4>
&lt;p>Below is the snippet of code that houses the Onboarding method. After every line of code, documentation has been written to make the code as readable as possible.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">Onboarding&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">context:&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//Build context of the screen
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">atClientPreference:&lt;/span> &lt;span style="color:#000">atClientPreference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//This specifies several
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// attributes such as domain and namespace
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">domain:&lt;/span> &lt;span style="color:#000">AtEnv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rootDomain&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is pointing the application&amp;#39;s connection to
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// the production level of the @protocol
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">rootEnvironment:&lt;/span> &lt;span style="color:#000">AtEnv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">rootEnvironment&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">appAPIKey:&lt;/span> &lt;span style="color:#000">AtEnv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">appApiKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This APIKey makes your application unique from
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// other applications created on the @platform
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">onboard:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_logger&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">finer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Successfully onboarded &lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the onboard function which will take the map of atsigns (which
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// have been authenticated already)/atCLient preferences along with the current
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// atsign attempting to authenticate.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// If the authentication is successful, it will be logged and you will be taken
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// to the next screen
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">onError:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_logger&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">severe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Onboarding throws &lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">error&lt;/span>&lt;span style="color:#4e9a06"> error&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// If the authentication process fails, an error is thrown
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#f57900">nextScreen:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">HomeScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The next screen after successful
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// authentication will be the HomeScreen
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After successfully onboarding, you are then taken to the &amp;lsquo;Share a Snack&amp;rsquo; screen. This is where you can enter an @sign to send a snack to.&lt;/p>
&lt;center>
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/shareSnack.png" style="height:520px;">&lt;/img>
&lt;/center>
&lt;h4 id="how-are-the-snacks-being-sent">How are the snacks being sent?&lt;/h4>
&lt;p>The current snack that is being sent securely to a receiving atsign has its value stored and sent through what is known as an AtKey object. In its simplest terms, an atkey allows for secure data sharing on the @platform. If you wish to learn more about AtKey Objects, watch our quick YouTube video covering them
&lt;a href="https://www.youtube.com/watch?v=jZ7oTnPZVxc&amp;t=10s" target="_blank">here&lt;/a>!&lt;/p>
&lt;h5 id="creating-the-snack">Creating the snack&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">metaData&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Metadata describes a few attributes that exists within an AtKey object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">isPublic&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// If set to true, the atkey and its value can be looked
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// up from anywhere on the @platform
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">isEncrypted&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Will encrypt the entire object including its value
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">namespaceAware&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Appends the application’s namespace to the Atkey
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">ttl&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100000&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// TTL (Time To Live) is a mechanism used to define the length
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// of time in which this object will exist on the @platform. After the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// declared time has reached zero, the object will be permanently deleted.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This mechanism is declared in milliseconds
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the AtKey object itself
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">keyAtsign&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the name of the object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">currentAtsign&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the creator/original sender
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// of the object, us in this instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sendSnackTo&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is who the object will be shared with
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">metadata&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">metaData&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This will integrate all of the values we declared
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// earlier
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The magic line to send the snack
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">put&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">snack&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// The put verb will take our object&amp;#39;s name, and the value of the object and
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// store it on our secondary server with all of the attributes we declared.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// This will sync our secondary and primary servers so that the snack will be
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// sent to the receiving @sign
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">popSnackBar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;You just sent. A&lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">snack&lt;/span>&lt;span style="color:#4e9a06">, to &lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">sendSnackTo&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// This is the message that pops up when a snack is sent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="receiving-the-snack">Receiving the snack&lt;/h5>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">metaData&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Metadata describes a few attributes that exists within an AtKey object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">isPublic&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// If set to true, the atkey and its value can be looked
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// up from anywhere on the @platform
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">isEncrypted&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Will encrypt the entire object including its value
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">namespaceAware&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Appends the application’s namespace to the Atkey
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the AtKey object itself
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">keyAtsign&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the name of the object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">sharedByAtsign&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the creator/original sender
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// of the object
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">currentAtsign&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is who the object has been shared with
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">metadata&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">metaData&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This will integrate all of the values we declared
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// earlier
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">snackKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The magic line that receives the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// snack from the @platform
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">snack&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">snackKey&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">toString&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Here is our snack&amp;#39;s value being
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// given to a declared variable
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">popSnackBar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Yay! A &lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">snack&lt;/span>&lt;span style="color:#4e9a06"> ! From &lt;/span>&lt;span style="color:#4e9a06">$&lt;/span>&lt;span style="color:#000">sharedByAtsign&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// This is the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// message that pops up when a snack is received
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s it! You have now securely sent a snack to another @sign on the @platform!&lt;/p>
&lt;h3 id="where-do-i-go-next">Where do I go next?&lt;/h3>
&lt;!-- If you are looking to gain more understanding of the @platform, we have more demo applications to share with you! Each possesses a step-by-step guide and explanation to get you up and running on the @platform!
[Chit_Chat](/docs/sample_apps/chitchat/) - Secure peer-to-peer messaging
[@mosphere Pro](/docs/sample_apps/atmosphere/) - End-to-End encrypted file sharing
[@rrive](/docs/sample_apps/arrive/) - Peer-to-peer location sharing
If you are in the mood for reading more on the @platform, click [here](/docs/get-started/understand-the-platform/). -->
&lt;p>If you are looking to gain more understanding of the @platform, we have more demo applications coming soon!&lt;/p>
&lt;p>For now, if you&amp;rsquo;d like to read more on the @platform, click &lt;a href="https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/">here&lt;/a>&lt;/p></description></item><item><title>Docs: Try your own @platform project</title><link>https://devstaging.atsign.wtf/docs/get-started/tryatplatform/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/get-started/tryatplatform/</guid><description>
&lt;p>This tutorial will guide you through a 5 step process to install and run our demo snackbar sender application. Please follow the steps below:&lt;/p>
&lt;div class="toggleblock">
&lt;h3 onclick="toggleBlock(this)">
&lt;i class="fas fa-chevron-right">&lt;/i>Step 1: Install at_app
&lt;/h3>
&lt;div class="toggleblock-content">
Run the following command to install at_app, our developer toolkit:
&lt;div id="code-1" class="codeblock">
&lt;pre>
&lt;code>dart pub global activate at_app &lt;/code>
&lt;i class="fas fa-copy" id="code-1-icon" onclick="copyCodeblock('dart pub global activate at_app', 'code-1-icon')">&lt;/i>
&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="toggleblock">
&lt;h3 onclick="toggleBlock(this)">
&lt;i class="fas fa-chevron-right">&lt;/i>Step 2: Install the demo app
&lt;/h3>
&lt;div class="toggleblock-content">
Next install the app like so:
&lt;div id="code-2" class="codeblock">
&lt;pre>
&lt;code>at_app create -d snackbar_sender your-folder &lt;/code>
&lt;i class="fas fa-copy" id="code-2-icon" onclick="copyCodeblock('at_app create -d snackbar_sender your-folder', 'code-2-icon')">&lt;/i>
&lt;/pre>
&lt;/div>
&lt;p>(Read more on at_app &lt;a href="https://pub.dev/packages/at_app/example" target=_blank>here&lt;/a>)&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> Replace &amp;ldquo;your-folder&amp;rdquo; with the folder you created your project in.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="toggleblock">
&lt;h3 onclick="toggleBlock(this)">
&lt;i class="fas fa-chevron-right">&lt;/i>Step 3: Run the demo app
&lt;/h3>
&lt;div class="toggleblock-content">
Then run the demo app:
&lt;div id="code-3" class="codeblock">
&lt;pre>
&lt;code>&lt;p>cd your-folder&lt;br/>flutter run&lt;/p> &lt;/code>
&lt;i class="fas fa-copy" id="code-3-icon" onclick="copyCodeblock('\u003cp\u003ecd your-folder\nflutter run\u003c\/p\u003e\n', 'code-3-icon')">&lt;/i>
&lt;/pre>
&lt;/div>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> Replace &amp;ldquo;your-folder&amp;rdquo; with the folder you created your project in.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="toggleblock">
&lt;h3 onclick="toggleBlock(this)">
&lt;i class="fas fa-chevron-right">&lt;/i>Step 4: Onboard an @sign
&lt;/h3>
&lt;div class="toggleblock-content">
&lt;center>
&lt;p>Watch the GIF below to see how to get a free @sign within the app itself!&lt;/p>
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/croppedWT.gif" style="margin: auto; height:600px;">
&lt;/center>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>If you&amp;rsquo;d like to purchase an @sign or would simply like to create and receive any type of @sign on the website, feel free to visit &lt;a href="https://my.atsign.com/go">atsign.com&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="toggleblock">
&lt;h3 onclick="toggleBlock(this)">
&lt;i class="fas fa-chevron-right">&lt;/i>Step 5: Send a snack!
&lt;/h3>
&lt;div class="toggleblock-content">
&lt;center>
&lt;p>
Enter an @sign that will receive the sent snack. Be sure that it is the same @sign that you have entered in the receiver below!
&lt;/p>
&lt;iframe src="https://cconstab.github.io/snackbar/#/" title="Snackbar Code" class="receiver">&lt;/iframe>
&lt;/center>
&lt;/div>
&lt;/div>
&lt;h3 id="whats-next">What&amp;rsquo;s next?&lt;/h3>
&lt;p>If you are looking for a more advanced version of our Snackbar demo, look no further! Follow the step-by-step guide to send end-to-end encrypted snacks (chocolate bars!) to another device &lt;a href="https://devstaging.atsign.wtf/docs/sample_apps/snackbar/">here&lt;/a>!&lt;/p>
&lt;style>
.receiver {
margin-top: 1rem;
min-height: 400px;
}
&lt;/style></description></item><item><title>Docs: What are the changes?</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/changes/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/changes/</guid><description>
&lt;h2 id="get-instances-of-atclient-and-other-services">Get instances of AtClient and other services.&lt;/h2>
&lt;ol>
&lt;li>To initialize AtClient Instance call setCurrentAtSign method on
&lt;code>AtClientManager.getInstance()&lt;/code>.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>setCurrentAtSign&lt;/code> accepts the following arguments: currentAtSign,
namespace and the preferences.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">setCurrentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">preferences&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>The &lt;code>AtClientManger&lt;/code> Instance has getter &lt;code>atClient&lt;/code> which returns an
instance of &lt;code>AtClient&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">AtClient&lt;/span> &lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The &lt;code>AtClientManager&lt;/code> instance has a late initialized variable
&lt;code>notificationService&lt;/code> which is for accessing notification service methods.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">NotificationService&lt;/span> &lt;span style="color:#000">notificationService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The &lt;code>AtClientManager&lt;/code> instance has a late initialized variable &lt;code>syncService&lt;/code>
which is for invoking the sync.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">SyncService&lt;/span> &lt;span style="color:#000">syncService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note&lt;/strong>: Above code should be executed every time when the @sign is switched to
get the right instances representing the new @sign.&lt;/p>
&lt;h2 id="sending-and-receiving-notifications">Sending and receiving notifications.&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Get the &lt;code>AtClientManager&lt;/code> instance initially.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Access the &lt;code>notificationService&lt;/code> variable using atClientManager instance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Listen to notifications via callback and no filter. Ideally you don&amp;rsquo;t
want to do this.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// AtClientManager instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">AtClientManager&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// NotificationService variable.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">NotificationService&lt;/span> &lt;span style="color:#000">notificationService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Listen to notifications.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">notification&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_notificationCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notification&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Listen to notifications via callback and filter notification key by regex.
You can also come up with regexes that match other types of keys. Ex:
&amp;lsquo;wavi | buzz&amp;rsquo; or alternatively multiple listeners can also be registered.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">regex:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;.wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">notification&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_notificationCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notification&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Send notification. Await variant.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// AtKey
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">phoneKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;phone&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@bob🛠&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@alice🛠&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// AtKey&amp;#39;s Value (String)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">atValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;+1 100 200 300&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Update the value and capture the notification result.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">NotificationResult&lt;/span> &lt;span style="color:#000">notificationResponse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">notificationService&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forUpdate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">phoneKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#f57900">value:&lt;/span> &lt;span style="color:#000">atValue&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Validating if a notification failed in the await variant.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationStatusEnum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">NotificationStatusEnum&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">undelivered&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Do something on notification error.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientException&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Do something on successful delivery response.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Successfully delivered notification.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The other notifications are as follows -&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// Delete notification
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">NotificationResult&lt;/span> &lt;span style="color:#000">notificationResponse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forDelete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">phoneKey&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Text notify
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">NotificationResult&lt;/span> &lt;span style="color:#000">notificationResponse&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forText&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;phone&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@bob🛠&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Send notification using Callback.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forUpdate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#f57900">value:&lt;/span> &lt;span style="color:#000">atValue&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#f57900">onDone:&lt;/span> &lt;span style="color:#000">_onSuccessCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">onError:&lt;/span> &lt;span style="color:#000">_onErrorCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">_onSuccessCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResult&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Do something on successful delivery response.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResult&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">_onErrorCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResult&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Do something on notification error
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">notificationResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientException&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="syncing-the-data">Syncing the data.&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>The &lt;code>atClientManger&lt;/code> instance has getter &lt;code>atClient&lt;/code> which returns an instance
of &lt;code>AtClient&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">AtClient&lt;/span> &lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>CRUD operations&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">put&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">delete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">params&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Syncing the data. Apps no longer have to use &lt;code>SyncStrategy&lt;/code> or
&lt;code>isDedicated&lt;/code> flag or manually call &lt;code>sync&lt;/code>. All sync requests will be
internally kept in a queue and synced to the server at periodic time
interval (approx. 15 seconds). If remote server is updated from some other
device, then those changes will be also synced at periodic intervals.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">syncService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Optionally, Register to onDone callbacks to get SyncResult when run asynchronously.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">onDone:&lt;/span> &lt;span style="color:#000">_onSuccessCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">_onSuccessCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">syncResult&lt;/span>&lt;span style="color:#000;font-weight:bold">){&lt;/span>
&lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">syncResult&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Optionally, call &lt;code>setOnDone&lt;/code> for global onDone callback. Call this method
to set the Global onDone callback. This method will be called when a sync is
completed. When a specific onDone function is passed to the sync function,
then the specific onDone is called.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setOnDone&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">onDone:&lt;/span> &lt;span style="color:#000">_onSuccessCallback&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docs: at_hello_world</title><link>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_hello_world/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_hello_world/</guid><description>
&lt;p>If you have gone through the steps of setting up the virtual environment and wish to learn how to implement a few common verbs and methods of the @platform, we highly recommend walking through the at_hello_world application.&lt;/p>
&lt;p>Below, you can see a small demonstration of how the at_hello_world application works.&lt;/p>
&lt;p align="center">
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/hello_world_demo.gif" alt="at_hello_world" height= "520px" width= "300px"/>
&lt;/p>
&lt;div style= "background-color:#F05F3E;color:white; min-height:100px;width:200px;position:relative; float:right;padding:10px;margin-bottom:20px;margin-left: 20px;">
&lt;h3> tl;dr &lt;/h3>
Overview too long for you? Watch the &lt;u>
&lt;a href="https://www.youtube.com/watch?v=4VZKuLiHsbU&amp;t=807s" style="color: white;">Tyler Time&lt;/a>&lt;/u> episode that covers this instead!
&lt;/div>
&lt;h2 id="overview-of-the-at_hello_world-app">Overview of the at_hello_world app&lt;/h2>
&lt;p>&amp;ldquo;at_hello_world&amp;rdquo; is a bit of a misnomer. Beyond the fact that this app does a lot more than printing “Hello World!” on the console of your IDE, if you lift its hood, you’ll find a tremendous amount of stuff going on (tracing all the functions called in the server_demo_service.dart file will get you several abstraction layers deep into the @protocol!). By no means do you have to understand everything that is happening behind the scenes in the at_hello_world application, but it’ll definitely help to grasp the basics.&lt;/p>
&lt;p>Just like the rest of the @platform, all of our demo applications are open source. Feel free to download the at_hello_world code from our GitHub repository &lt;a href="https://github.com/atsign-foundation/at_demos">here&lt;/a>.&lt;/p>
&lt;p>Upon downloading and booting up the app on an emulator, you are met with the Login screen where you can login after selecting a testable @sign to authenticate with from the dropdown menu.&lt;/p>
&lt;p>After successfully authenticating, you will be taken to the home screen where you will see three separate boxes which house the three main functons of the at_hello_world app.&lt;/p>
&lt;h2 id="the-three-main-functions-of-the-at_hello_world-app">The Three Main Functions of the at_hello_world app&lt;/h2>
&lt;h3 id="update">Update&lt;/h3>
&lt;p>The update section, as you see within the code, actually only involves a single if statement (to ensure information is actually passed) and four lines of code within it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> &lt;span style="color:#000">_update&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">_key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">_value&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">pair&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">pair&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">_key&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">pair&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">put&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pair&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_value&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Above is the entirety of the update function! The “pair” variable in the first line of the if statement is something that you will see in all @platform applications. The @protocol interprets keys as AtKey objects, which have several attributes like “key”, “metadata”, and “sharedBy” that help the backend understand what to do with them.&lt;/p>
&lt;p>In the code snippet above, we are calling the “key” attribute to add a string that will be paired to a value and the “sharedWith” attribute to define with whom we are sharing this AtKey-value pair. If we’d like to store “hello” and “world” on @bob’s secondary server, we would set pair.key to “hello” and pair.sharedWith to “@bob”. This latter detail may be a bit odd: Bob is sharing this AtKey object with himself so that he can access it! You can see use cases of sharing AtKey-value pairs with other @signs in the &lt;a href="https://devstaging.atsign.wtf/docs/sample-apps/at_cookbook/">at_cookbook&lt;/a> sample app.&lt;/p>
&lt;p>Following up with our “hello” and “world” example, the final step in the _update function is to call the “put” verb from the _serverDemoService object with “pair” as the AtKey instance and “world” as the corresponding value (which should just be a string). When the verb executes successfully, you will have put the “hello” and “world” key-value pair into @bob’s secondary server!&lt;/p>
&lt;p>While this is certainly an impressive feat (after all, these few seemingly unassuming lines of code uniquely encrypts the key-value pair to @bob’s secondary server and makes it persist), we’re still limited by the fact that we can’t retrieve key-value pairs from a secondary server. In the @protocol, retrieving key-value pairs takes two steps: scanning the relevant secondary server for AtKey objects, and getting the value associated with a scanned AtKey object.&lt;/p>
&lt;h3 id="scan">Scan&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve &amp;ldquo;put&amp;rdquo; information on our secondary, we&amp;rsquo;d like to retrieve that key in order to read the information associated with it. In order to display values that we’ve stored, we first need to scan a secondary server for relevant AtKey objects (i.e. those that belong to the “namespace” of the application) and retrieve the values corresponding to those AtKeys.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">_scan&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getAtKeys&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">sharedBy:&lt;/span> &lt;span style="color:#000">atSign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">length&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">scanList&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">toList&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">_scanItems&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">scanList&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The only @protocol verb we’re calling in this snippet is “getAtKeys()”. This verb is an incredibly robust function that can gather and sort AtKeys on a secondary server based on things like who shared those AtKeys (the “sharedBy” optional argument) and regular expressions (e.g. the namespace of the application). Because the at_hello_world app is a special case where we only share AtKey objects with ourselves, we can simply call getAtKeys with the “sharedBy” argument set to our own @sign (i.e. widget.atSign). This will return a List of the AtKey objects we want.&lt;/p>
&lt;p>Once you get that List of AtKeys, you’re pretty much finished! In the at_hello_world app, because we want to display keys as strings, we call the “map” method on the List of AtKeys to create a new list that just contains the “key” attribute of each AtKey object. In the last line of code, we call “setState” so that the app loads the newly populated list of keys in the DropdownButton widget.&lt;/p>
&lt;h3 id="lookup">Lookup&lt;/h3>
&lt;p>An individual on the at_hello_world app is given a list of keys, and they select one (_lookupKey) to find its corresponding value. How do we do this? The answer lies in the _lookup function of the HomeScreen class:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> &lt;span style="color:#000">_lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">_lookupKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">lookup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">_lookupKey&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">_lookupValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the first line of the if statement, we are creating a new AtKey object called “lookup.” The reason for this is we need a dummy AtKey object that can be passed into the @protocol for looking up the correct value. For the at_hello_world app, this dummy AtKey just needs its “key” and “sharedWith” attributes populated before it can be passed into the “get” verb.&lt;/p>
&lt;p>By the way, if you think creating a copy of an AtKey object is a hassle, that’s totally valid! In a typical @platform application, you have the _scan and _lookup functions merged to some degree so that you can just pass in the AtKey objects we retrieved with the “getAtKeys” verb to the “get” verb. The point of having two separate functions in the at_hello_world project is to define the “scanning” and “getting” steps more concretely.&lt;/p>
&lt;p>“Get” is a very straightforward verb: it gets the value corresponding to a specified AtKey.&lt;/p>
&lt;p>Once we retrieve the value paired with the “lookup” AtKey, all that’s left is calling “setState” to display the “_lookupValue” on screen.&lt;/p></description></item><item><title>Docs: The @client/AtClient SDK Cookbook</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/clientsdkcookbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/clientsdkcookbook/</guid><description>
&lt;h1 id="the-verb-tree">&lt;strong>The Verb tree&lt;/strong>&lt;/h1>
&lt;p>Before we look at some of the sample code, the verb tree gives you a big picture of all of the verbs and what can be executed where.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Resources/verbtree.png" alt="alt_text" title="Verb Tree">&lt;/p>
&lt;h2 id="1-scan">1. Scan&lt;/h2>
&lt;p>The scan verb is used to scan the available @ addresses for you either at the public level or all authorized data once the pol process has been completed. This allows addresses to be discovered and perhaps be harvested so if an address has a _ character as its first character then it is omitted from the scan list although it can still be looked up if known. The following example shows just that.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;ol>
&lt;li>Get an instance of AtClient&lt;/li>
&lt;li>Execute the scan verb using the AtClient&lt;/li>
&lt;/ol>
&lt;h4 id="11-get-an-instance-of-atclient">1.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the Client Impl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// Namespace is mandatory to be passed. E.g me, buzz, etc.,
await AtClientImpl.createClient('@bob','me', preference);
var atClient = await AtClientImpl.getClient('@bob');
}
&lt;/code>&lt;/pre>&lt;h4 id="12-execute-the-scan-verb-using-atclient">1.2 Execute the scan verb using @AtClient&lt;/h4>
&lt;h5 id="asimple-scan---returns-all-keys">a.Simple Scan - Returns all keys&lt;/h5>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
// Scans keys stored in app storage
await atClient.getKeys();
&lt;/code>&lt;/pre>&lt;h5 id="bscan-keys-matching-a-regular-expression">b.Scan keys matching a regular expression&lt;/h5>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
// Scans keys in .me namespace
await atClient.getKeys(regex:'.me');
&lt;/code>&lt;/pre>&lt;h5 id="cscan-keys-shared-with-another-atsign">c.Scan keys shared with another atSign&lt;/h5>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
// Scans keys shared with @alice
await atClient.getKeys(sharedWith:'alice');
&lt;/code>&lt;/pre>&lt;h5 id="dscan-keys-shared-by-another-atsign">d.Scan keys shared by another atSign&lt;/h5>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
// Scans keys shared by @alice. This performs authenticated scan on @alice's secondary.
await atClient.getKeys(sharedBy:'alice');
&lt;/code>&lt;/pre>&lt;h2 id="2-update">2. Update&lt;/h2>
&lt;p>Update verb used to add entries in the @server. @signs have to be authenticated for one to run the update verb on the @server.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;ol>
&lt;li>Get an instance of AtClient&lt;/li>
&lt;li>Execute the update verb using the AtClient&lt;/li>
&lt;/ol>
&lt;h4 id="21-get-an-instance-of-atclient">2.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
//create atClient
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="22-execute-the-update-verb-using-atclient">2.2 Execute the update verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// create phoneKey
var phoneKey = AtKey()..key = 'phone';
// Update a phone number visible only to @bob
await atClient.put(phoneKey, ''+1-123-4567');
// create emailKey
var emailKey = AtKey()..key = 'email'
..sharedWith = '@alice';
// Update an email visible only to @alice
await atClient.put(emailKey, 'bob@atsign.com');
// Update an email visible only to everyone
// create metadata with isPublic true
var metadata = Metadata()..isPublic=true;
// create emailKey and update metadata
var emailKey = AtKey()..key = 'email'
..metadata = metadata;
await atClient.put(emailKey, 'bob@gmail.com');
// Update a location that expires in 10 minutes
var metadata = Metadata()..ttl=600000;
var locationKey = AtKey()..key = 'current_location'
..metadata = metadata;
await atClient.put(locationKey, 'https://goo.gl/maps/Trs5Dao562tLFK5Q9');
&lt;/code>&lt;/pre>&lt;h2 id="3-lookup">3. Lookup&lt;/h2>
&lt;p>The lookup verb is used to lookup a value on a @server of another @sign. The following demonstrates the use of lookup verb.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;h4 id="31-get-an-instance-of-atclient">3.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
// Get
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="32-execute-the-lookup-verb-using-atclient">3.2 Execute the lookup verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// Look up phone number sharedBy @alice
//lookup:phone.me@alice
var atKey = AtKey()..key = 'phone'
..sharedBy = '@alice';
await atClient.get(atKey);
&lt;/code>&lt;/pre>&lt;h2 id="4-plookup">4. Plookup&lt;/h2>
&lt;p>The plookup verb is used to lookup a public value on a @server of another @sign if the client is authenticated. Plookup verb can only be executed on a remote @server. The following demonstrates the use of plookup verb.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;h4 id="41-get-an-instance-of-atclient">4.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
//Get
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="42-execute-the-plookup-verb-using-atclient">4.2 Execute the plookup verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// plookup public phone number of @alice
var metadata = Metadata()..isPublic=true;
var publicPhoneKey = AtKey()..key = 'phone'
..sharedBy = '@alice'
..metadata = metadata;
await atClient.get(publicPhoneKey);
&lt;/code>&lt;/pre>&lt;h2 id="5-llookup">5. Llookup&lt;/h2>
&lt;p>The llookup verb is used to lookup a value on a local @server storage of current @sign. The following demonstrates the use of llookup verb.&lt;/p>
&lt;h4 id="51-get-an-instance-of-atclient">5.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
//Get
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="52-execute-the-llookup-verb-using-atclient">5.2 Execute the llookup verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// Local lookup a self key e.g @bob:email.me@bob
var privateEmailKey = AtKey()
..key = 'email'
..sharedWith = '@bob';
var alicePrivateEmail = await atClient.get(privateEmailKey);
// Local lookup phone shared with @alice e.g @alice:email.me@bob
var phoneKey = AtKey()
..key = 'phone'
..sharedWith = '@alice';
await atClient.get(phoneKey);
// Local lookup a public key
var metadata = Metadata()..isPublic=true;
var firstnameKey = AtKey()
..key = 'firstname'
..metadata = metadata;
await atClient.get(firstnameKey);
// Local lookup a key ignoring namespace
var metadata = Metadata()..namespaceAware=false;
var firstnameKey = AtKey()
..key = 'firstname'
..metadata = metadata;
await atClient.get(firstnameKey);
&lt;/code>&lt;/pre>&lt;h2 id="6-delete">6. Delete&lt;/h2>
&lt;p>The “delete” verb is used for deleting @addresses.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;h4 id="61-get-an-instance-of-atclient">6.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// create AtClient
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="62-execute-the-delete-verb-using-atclient">6.2 Execute the delete verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// delete self key e.g @bob:phone.me@bob
var phoneKey = AtKey()..key = 'phone'
..sharedWith = '@bob';
await atClient.delete(phoneKey);
// delete email shared with @alice e.g @alice:phone.me@bob
var phoneKey = AtKey()..key = 'phone'
..sharedWith = '@alice';
await atClient.delete(phoneKey);
// delete a public key e.g public:phone.me@bob
var metadata = Metadata()..isPublic=true;
var phoneKey = AtKey()
..key = 'phone'
..metadata = metadata;
await atClient.delete(phoneKey);
&lt;/code>&lt;/pre>&lt;h2 id="7-stats">7. Stats&lt;/h2>
&lt;p>The “stats” verb is used to get certain predefined statistics from the @server.&lt;/p>
&lt;h4 id="71-get-an-instance-of-atclient">7.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// Get
var atClient = await AtClientImpl.createClient('@bob', 'me', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="72-execute-the-stats-verb-using-atclient">7.2 Execute the stats verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
// Execute the verb e.g stats:1,stats:1,2 etc.,
// You can use stats number from 1 to 10
// If you want to request multiple types use as , separated values
// Ex: stats:1,2,5
await atClient.getRemoteSecondary().executeCommand('stats:1');
&lt;/code>&lt;/pre>&lt;h2 id="8-config">8. Config&lt;/h2>
&lt;p>The “config” verb is used to configure block list entries in the @server. If an @sign is added to the block list then connections to the @server will not be accepted.&lt;/p>
&lt;p>Following are the steps to run the scan verb using the @Client SDK&lt;/p>
&lt;ol>
&lt;li>Get an instance of AtClient&lt;/li>
&lt;li>Set up a ConfigVerbBuilder &amp;amp; execute the verb using the AtClient&lt;/li>
&lt;/ol>
&lt;h4 id="81-get-an-instance-of-atclient">8.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// Get
var atClient = await AtClientImpl.getClient('@bob', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="82-set-up-a-configverbbuilder--execute-the-verb-using-the-atclient">8.2 Set up a ConfigVerbBuilder &amp;amp; execute the verb using the AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob, AtClientPreference());
var builder = ConfigVerbBuilder()..block = '@rachel';
// Execute the verb
await atClient.getLocalSecondary().executeVerb(builder);
&lt;/code>&lt;/pre>&lt;h2 id="9-notify">9. Notify&lt;/h2>
&lt;p>The “notify” verb is used to notify another @server of change related to a @address.&lt;/p>
&lt;p>Following are the steps to run the notify verb using the @Client SDK&lt;/p>
&lt;ol>
&lt;li>Get an instance of AtClient&lt;/li>
&lt;li>Set up a NotifyVerbBuilder&lt;/li>
&lt;li>Execute the scan using the AtClient&lt;/li>
&lt;/ol>
&lt;h4 id="91-get-an-instance-of-atclient">9.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// Get
var atClient = await AtClientImpl.getClient('@bob');
}
&lt;/code>&lt;/pre>&lt;h4 id="92-execute-the-notify-verb-using-atclient">9.2 Execute the notify verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Create Atclient Instance
await AtClientImpl.createClient('')
// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
var atKey = AtKey()
..key = 'phone@bob'
..sharedWith = '@alice'
..sharedBy = '@bob'
// Execute the verb
await atClient.notify(atKey, '+1 987 986 2233', OperationEnum.update);
// Sending Notification with Notification Strategy 'ALL'
await atClient.notify(atKey, '+1 987 986 2233', OperationEnum.update,
priority: PriorityEnum.low,
strategy: StrategyEnum.all);
// Sending Notification with Notification Strategy 'Latest N'
await atClient.notify(atKey, '+1 987 986 2233', OperationEnum.update,
priority: PriorityEnum.high,
strategy: StrategyEnum.latest,
latestN:3,
Notifier: 'wavi');
&lt;/code>&lt;/pre>&lt;h4 id="93-execute-the-notify-status-verb-using-atclient">9.3 Execute the notify status verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Create Atclient Instance
await AtClientImpl.createClient('')
// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob);
var atKey = AtKey()
..key = 'phone@bob'
..sharedWith = '@alice'
..sharedBy = '@bob'
// Execute the notify verb
var notiticationId = await atClient.notify(atKey, '+1 987 986 2233', OperationEnum.update);
// get notification status of the above notificationId
var status = await atClient.notifyStatus(notificationId);
&lt;/code>&lt;/pre>&lt;h2 id="10-monitor">10. Monitor&lt;/h2>
&lt;p>The “monitor” verb is used to stream incoming notifications from the @server to @Client.&lt;/p>
&lt;p>Following are the steps to run the notify verb using the @Client SDK&lt;/p>
&lt;ol>
&lt;li>Get an instance of AtClient&lt;/li>
&lt;li>Execute the monitor using the AtClient&lt;/li>
&lt;/ol>
&lt;h4 id="101-get-an-instance-of-atclient">10.1 Get an instance of AtClient&lt;/h4>
&lt;p>To get an instance of the AtClient by calling the getClient method on the AtClientImpl class.&lt;/p>
&lt;pre>&lt;code>import 'package:at_client/at_client.dart';
import 'package:at_client/src/client/at_client_impl.dart';
void main() async {
// Construct AtClientPreference
var preference = AtClientPreference();
preference.hiveStoragePath = '/hive/storage/path';
preference.commitLogPath = '/commit/log/path';
// Get
var atClient = await AtClientImpl.getClient('@bob', preference);
}
&lt;/code>&lt;/pre>&lt;h4 id="102-execute-the-monitor-verb-using-atclient">10.2 Execute the monitor verb using AtClient&lt;/h4>
&lt;pre>&lt;code>// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
var builder = MonitorVerbBuilder();
// Execute the verb
await atClient.startMonitor(&amp;lt;privateKey&amp;gt;,&amp;lt;NotificationCallback&amp;gt;);
&lt;/code>&lt;/pre>&lt;pre>&lt;code>//Using Regex on Monitor verb
// Get an instance of AtClient for @bob
var atClient = await AtClientImpl.getClient('@bob');
var builder = MonitorVerbBuilder();
// Execute the verb
await atClient.startMonitor(&amp;lt;privateKey&amp;gt;,&amp;lt;NotificationCallback&amp;gt;,regex: '.wavi');
&lt;/code>&lt;/pre>&lt;h2 id="verb-parameter-reference">Verb Parameter Reference&lt;/h2>
&lt;p>&lt;em>&lt;em>required&lt;/em> optional’&lt;/em>*&lt;/p>
&lt;table>
&lt;tr>
&lt;td>&lt;strong>Verb&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Parameters&lt;/strong>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>from&lt;/strong>
&lt;/td>
&lt;td>atSign&lt;strong>*&lt;/strong> - @ sign you claim to be
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>cram&lt;/strong>
&lt;/td>
&lt;td>digest&lt;strong>*&lt;/strong> - SHA512 digest
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>pkam&lt;/strong>
&lt;/td>
&lt;td>signature&lt;strong>*&lt;/strong> - Signed challenge
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>pol&lt;/strong>
&lt;/td>
&lt;td>NA
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>scan&lt;/strong>
&lt;/td>
&lt;td>forAtSign&lt;strong>’&lt;/strong> - Scans the keys shared by forAtSign
&lt;p>
regex&lt;strong>’&lt;/strong> - Regex to which the @addresses has to be matched to be returned as a result
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>update&lt;/strong>
&lt;/td>
&lt;td> ttl&lt;strong>’&lt;/strong> - Time to live in milliseconds. Value for the key won't be available after the ttl’
&lt;p>
ttb&lt;strong>’&lt;/strong> - Time to birth in milliseconds. Value for the key will be available after the ttb’
&lt;p>
Scope&lt;strong>’&lt;/strong> - Public vs Private
&lt;p>
forAtSign&lt;strong>*&lt;/strong> - For whom the value is being set
&lt;p>
atKey&lt;strong>*&lt;/strong> - Name of the @address
&lt;p>
value&lt;strong>*&lt;/strong> - Value for the @address
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>lookup&lt;/strong>
&lt;/td>
&lt;td>atKey&lt;strong>*&lt;/strong> - Name of the @address
&lt;p>
atSign&lt;strong>*&lt;/strong> - @ signs namespace
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>llookup&lt;/strong>
&lt;/td>
&lt;td>atKey&lt;strong>*&lt;/strong> - Name of the @address
&lt;p>
atSign&lt;strong>*&lt;/strong> - @ signs namespace
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>plookup&lt;/strong>
&lt;/td>
&lt;td>atKey&lt;strong>*&lt;/strong> - Name of the @address
&lt;p>
atSign&lt;strong>*&lt;/strong> - @ signs namespace
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>delete&lt;/strong>
&lt;/td>
&lt;td>atKey&lt;strong>*&lt;/strong> - Name of the @address
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>stats&lt;/strong>
&lt;/td>
&lt;td>statId&lt;strong>’&lt;/strong> - Id’s of the statistics to display
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>config&lt;/strong>
&lt;/td>
&lt;td>whatToConfig&lt;strong>*&lt;/strong> - Thing to configure
&lt;p>
configValue&lt;strong>*&lt;/strong> - Value of the thing to configure
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>notify&lt;/strong>
&lt;/td>
&lt;td>forAtSign&lt;strong>*&lt;/strong> - @sign to notify
&lt;p>
key&lt;strong>*&lt;/strong> - Key to which the change has happened
&lt;p>
change&lt;strong>*&lt;/strong> - Change it self
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>monitor&lt;/strong>
&lt;/td>
&lt;td>regex&lt;strong>’&lt;/strong> - Regex that needs to be matched for the value to be monitored
&lt;/td>
&lt;/tr>
&lt;/table></description></item><item><title>Dev_tools: App Privacy Policy</title><link>https://devstaging.atsign.wtf/dev_tools/tt/privacy-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/dev_tools/tt/privacy-policy/</guid><description>
&lt;p>This application contains private data either created by you or created by others and shared with you. It also may contain data that you or others have chosen to share publicly.&lt;/p>
&lt;p>After being encrypted, this data is sent to a cloud server that provides backup and synchronization with other devices. But don’t worry — since the keys to this data remain on your device, whoever runs this cloud server won’t be able to access any data that you have not set as public.&lt;/p>
&lt;p>In other words, all private data belongs to its creator, and can only be accessed by those with permission to view it. Nobody else, including us, can access any of this private data, resulting in:&lt;/p>
&lt;ul>
&lt;li>No surveillance&lt;/li>
&lt;li>No snooping&lt;/li>
&lt;li>No monetization of data&lt;/li>
&lt;/ul>
&lt;p>Remember, the data that you share publicly is public and therefore accessible to anyone, so take care with what you choose to share openly.&lt;/p>
&lt;p>Welcome to a new way of thinking about data ownership and privacy. Regardless of how you choose to share it, your data should — and will — always belong to you.&lt;/p>
&lt;p>How’s that for a privacy policy?&lt;/p></description></item><item><title>Docs: Services provided by the @platform</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/services/</guid><description>
&lt;h3 id="data-caching--encryption">Data Caching &amp;amp; Encryption&lt;/h3>
&lt;p>Data that others have shared with an @sign owner is cached on the @sign owner&amp;rsquo;s device’s local keystore if permitted.&lt;/p>
&lt;p>&lt;a href="https://atsigncompany.medium.com/data-encryption-caching-with-the-protocol-debe9efc0f49">Learn more&lt;/a>&lt;/p>
&lt;h3 id="notification">Notification&lt;/h3>
&lt;p>Notification is a mechanism which enables an @sign to share data with another @sign. The data shared is end to end encrypted. @sign owner can query the status of the notification.&lt;/p>
&lt;p>&lt;a href="https://blog.atsign.dev/part-1-the-notify-verb-cko97bv8f00l5gws13umb0nvz">Learn more&lt;/a>&lt;/p>
&lt;h3 id="onboarding">Onboarding&lt;/h3>
&lt;p>The onboarding process is responsible for creating the authenticating keys for a new @sign or retrieving the authenticating keys of an existing @sign from the keys file provided by the @sign owner. It also synchronizes the data between mobile apps and the cloud secondary server.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_onboarding_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="peer-to-peer-streams">Peer-to-Peer Streams&lt;/h3>
&lt;p>Streams enable transferring of files between the @sign&amp;rsquo;s through a secure and dedicated socket between sender and receiver. The files can be a text documents, images, audio-video files etc. The stream transfers are end to end encrypted.&lt;/p>
&lt;p>&lt;a href="https://blog.atsign.dev/the-stream-verb-protocol-ckmwi28is01aqd2s184bien2q">Learn more&lt;/a>&lt;/p>
&lt;h3 id="persistence">Persistence&lt;/h3>
&lt;p>The persistence defines the interfaces on how the data in @protocol is stored.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_persistence_spec">Learn more&lt;/a>&lt;/p>
&lt;h3 id="synchronization">Synchronization&lt;/h3>
&lt;p>Synchronization is a process to keep the data in mobile apps and @sign server identical.&lt;/p>
&lt;p>&lt;a href="https://atsigncompany.medium.com/the-protocol-synchronization-77b00ca5341b">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: Specification</title><link>https://devstaging.atsign.wtf/docs/overview/at_protocol_spec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/at_protocol_spec/</guid><description>
&lt;h1 id="the-protocol-specification">The @protocol Specification&lt;/h1>
&lt;br>
&lt;table>
&lt;tr>
&lt;td>
&lt;strong>Subject&lt;/strong>
&lt;/td>
&lt;td>@protocol specification
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Author(s)&lt;/strong>
&lt;/td>
&lt;td>Colin Constable, Kevin Nickels, Jagannadh Vanghuri
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Revision&lt;/strong>
&lt;/td>
&lt;td>v0.1.0 (draft)
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Date&lt;/strong>
&lt;/td>
&lt;td>July 5, 2021
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;br>
&lt;h2 id="root-server">Root Server&lt;/h2>
&lt;p>A Root Server should provide a lookup of where a Secondary Server for an @sign is running. This is similar to a DNS server.&lt;/p>
&lt;p>When asking a Root Server for the lookup of a particular @sign the Root Server should respond with a null if the name does not exist and if the name exists the DNS name or address of the @server and the IP port number for that @sign should be returned.&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;&lt;/code>&lt;/p>
&lt;p>The Root Server only has one verb - &lt;code>@exit&lt;/code> and all other inputs are considered to be lookup requests.&lt;/p>
&lt;h2 id="secondary-server">Secondary Server&lt;/h2>
&lt;p>A Secondary Server is where an @sign user&amp;rsquo;s personal data should be stored. One interacts with a secondary using the verbs exposed by the protocol.&lt;/p>
&lt;p>A Secondary Server should have 4 major sub components:&lt;/p>
&lt;ol>
&lt;li>Key Store&lt;/li>
&lt;li>Commit Log&lt;/li>
&lt;li>Access Log&lt;/li>
&lt;li>Notification Log&lt;/li>
&lt;/ol>
&lt;p>Verbs described in the document should be used to create, update, delete and retrieve information from the above sub components.&lt;/p>
&lt;h3 id="1-key-store">1. Key Store&lt;/h3>
&lt;p>Key store is a place where user data in a Secondary Server should be saved as key and value pairs. Apart from the value, an @sign user should be able to add certain metadata for a key.&lt;/p>
&lt;h4 id="key">&lt;strong>Key&lt;/strong>&lt;/h4>
&lt;p>A key in the @protocol can be formed by using any alphanumeric and special characters (UTF-8) excluding &amp;ldquo;@&amp;rdquo;, &amp;ldquo;:&amp;rdquo; and a white space (&amp;quot; &amp;ldquo;). A key in a secondary can be any of the following 5 types:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Public Key&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A public key is a key which can be looked up by any @sign user.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A public key should be part of the &lt;em>&lt;span style="text-decoration:underline;">scan&lt;/span>&lt;/em> verb result.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Format of the public key should be &lt;strong>public:&lt;identifier>:&amp;lt;@sign&amp;gt;&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>public:location@alice&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>The owner of the secondary should be allowed to update or delete the value of a public key.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Private Key&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A private key is a key which cannot be looked up any @sign user other than the one created it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A private key should not be returned in a &lt;em>&lt;span style="text-decoration:underline;">scan&lt;/span>&lt;/em> verb result.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Format of the private key should be &lt;strong>privatekey:&lt;identifier>:&amp;lt;@sign&amp;gt;&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>privatekey:pk1@alice&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>The owner of the secondary should be allowed to update or delete the value of a private key.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>User key&lt;/p>
&lt;ul>
&lt;li>A user key can only be looked up by an @sign user with whom the data has been shared.&lt;/li>
&lt;li>A user key should be part of the &lt;em>&lt;span style="text-decoration:underline;">scan&lt;/span>&lt;/em> verb result only for the user who created it and the specific user it has been shared with.&lt;/li>
&lt;li>Format of the key shared with someone else should be &lt;strong>&amp;lt;Shared with @sign&amp;gt;:&lt;identifier>:&amp;lt;Created by @sign&amp;gt;&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>@bob:phone@alice&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>Note: Above Key should be part of scan verb result for only @alice and @bob&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The owner of the secondary should be allowed to update or delete the value of a user key.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Internal Key&lt;/p>
&lt;ul>
&lt;li>Internal keys start with an underscore(_) and are not displayed in scan results. Internal keys can be looked up only by the owner of the secondary&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cached Key&lt;/p>
&lt;ul>
&lt;li>A cached key is a key that was originally created by another @sign user but is now cached on the Secondary Server of another user&amp;rsquo;s @sign as he/she was given permission to cache it.&lt;/li>
&lt;/ul>
&lt;!-- - A user should be able to enable/disable caching of someone else's key by virtue of the "enableKeyCaching" config parameter. &lt;TO DO: Kevin, Colin - We need to discuss. We don't have this yet -->
&lt;ul>
&lt;li>
&lt;p>A cached key should be listed in the &lt;em>&lt;span style="text-decoration:underline;">scan&lt;/span>&lt;/em> verb result for the @sign user who cached it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Format of the key shared with someone else should be &lt;strong>cached:&amp;lt;Shared with @sign&amp;gt;:&lt;identifier>:&amp;lt;Created by @sign&amp;gt;&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>cached:@bob:phone@alice&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>The user who has cached the key should not be allowed to update the cached key.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>An @sign user who has created and shared the key should be allowed to update a cached key, and if the &amp;ldquo;autoNotify&amp;rdquo; config parameters is set to true, the updated value should be notified (please refer to the &lt;code>notify&lt;/code> verb) and the cached key updated with the new value.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>If the user who originally shared the keys set the CCD (Cascade delete) to true, the cached key will be deleted when the original key is deleted.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h4 id="value">&lt;strong>Value&lt;/strong>&lt;/h4>
&lt;p>Text or binary values can be saved in a Secondary Server. The size of the value saved in a secondary is bound by the config parameter &amp;ldquo;maxBufferSize&amp;rdquo;.&lt;/p>
&lt;!-- &lt;TO DO: Kevin, Colin - We need to discuss. Do we need this.> -->
&lt;blockquote>
&lt;p>A user should be made aware of this limitation by using the &lt;code>stats&lt;/code> verb.&lt;/p>
&lt;/blockquote>
&lt;!-- &lt;TODO: Ex: @stats:10 should return the max size permitted by a secondary as a single value in bytes> -->
&lt;blockquote>
&lt;p>If a binary value is being saved on a Secondary Server, the &amp;ldquo;isBinary&amp;rdquo; attribute on the metadata should be set to true by the convention.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>Reference Value&lt;/p>
&lt;p>A Secondary Server should support referencing another key&amp;rsquo;s value.&lt;/p>
&lt;p>A reference value should be in the format &amp;ldquo;atsign://&lt;key>&amp;rdquo;.&lt;/p>
&lt;p>For example, &amp;lsquo;phone@bob(key)&amp;rsquo; is 1234 (value). Now another key called altPhone@bob can refer to phone@bob by referencing it as altPhone@bob = atsign://phone@bob.&lt;/p>
&lt;p>When the user does a lookup on the key that contains a reference, the Secondary Server should return a fully resolved value.&lt;/p>
&lt;!-- &lt;TO DO: Caching referenced keys is tricky. We have not yet implemented this yet.> -->
&lt;/li>
&lt;li>
&lt;p>Metadata&lt;/p>
&lt;p>Metadata of a key should describe the following properties of the value being inserted.&lt;/p>
&lt;table>
&lt;tr>
&lt;td>
&lt;strong>Meta Attribute&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Auto create?&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Description&lt;/strong>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>createdOn
&lt;/td>
&lt;td>Yes
&lt;/td>
&lt;td>Date and time when the key has been created.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>createdBy
&lt;/td>
&lt;td>Yes
&lt;/td>
&lt;td>@sign that has created the key
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>updatedOn
&lt;/td>
&lt;td>Yes
&lt;/td>
&lt;td>Date and time when the key has been last updated.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sharedWith
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>@sign of the user with whom the key has been shared. Can be null if not shared with anyone.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ttl
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>Time to live in milliseconds.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>expiresOn
&lt;/td>
&lt;td>Yes
&lt;/td>
&lt;td>A Date and Time derived from the ttl (now + ttl). A Key should be auto deleted once it expires.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ttb
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>Time to birth in milliseconds.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>availableFrom
&lt;/td>
&lt;td>Yes
&lt;/td>
&lt;td>A Date and Time derived from the ttl (now + ttl). A Key should be only available after availableFrom.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isCached
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>True if the key can be cached by another @sign user.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ttr
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>Time in milliseconds after which the cached key needs to be refreshed. Ttr of -1 indicates that the key can be cached forever.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>refreshAt
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>A Date and Time derived from the ttr. The time at which the key gets refreshed.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ccd
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>Indicates if a cached key needs to be deleted when the @sign user who has originally shared it deletes it.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isBinary
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>True if the value is a binary value.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isEncrypted
&lt;/td>
&lt;td>No
&lt;/td>
&lt;td>True if the value is encrypted
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-commit-log">2. Commit Log&lt;/h3>
&lt;p>A Secondary Server should record any create, update and delete operations in a commit log. The Commit Log should record these operations with a unique commit id so that users of the secondary can lookup operations that happened on or after a given commit id.&lt;/p>
&lt;p>A Secondary Server should provide a way to compact the Commit Log based on time and size.&lt;/p>
&lt;h3 id="3-access-log">3. Access Log&lt;/h3>
&lt;p>A Secondary Server should record the following user actions: user login, user authentication and lookup. The Access Log should record these operations so that users of the secondary can retrieve various statistics such as the most visited @sign or most visited keys.&lt;/p>
&lt;p>A Secondary Server should provide a way to compact the Access Log based on time and size.&lt;/p>
&lt;h3 id="4-notification-log">4. Notification Log&lt;/h3>
&lt;p>A Secondary Server should record any notifications that have been received and sent. Please check the &lt;code>notify&lt;/code> verb specification for details on how a notification should be sent.&lt;/p>
&lt;p>A Secondary Server should provide a way to compact the Notification Log based on time and size.&lt;/p>
&lt;h2 id="standard-keys">Standard Keys&lt;/h2>
&lt;p>A Secondary Server should have the following standard keys:&lt;/p>
&lt;table>
&lt;tr>
&lt;td>
&lt;strong>Key&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Description&lt;/strong>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>public:publickey@&lt;atsign>
&lt;/td>
&lt;td>Public key used by other atsigns for encryption.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>public:signing_publickey@&lt;atsign>
&lt;/td>
&lt;td>Public key used on a pol handler to verify a signed challenge
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;atsign>@signing_privatekey@&lt;atsign>
&lt;/td>
&lt;td>Private key used to sign a challenge on a pol request
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;atsign>:shared_key@&lt;atsign>
&lt;/td>
&lt;td>Symmetric key used to encrypt/decrypt self atsign data
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="configuration-parameters">Configuration Parameters&lt;/h2>
&lt;p>A Secondary Server should honor the following configuration parameters.&lt;/p>
&lt;!-- &lt;TO DO: Ideally these parameters should be set using some verb so that the user can control them. config verb can be extended to accomplish the same. Config verb also has the list option, so we can set/reset/list the configuration using the same> -->
&lt;table>
&lt;tr>
&lt;td>
&lt;strong>Key&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Valid Values&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Description&lt;/strong>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>autoNotify&lt;/strong>
&lt;/td>
&lt;td>true/false
&lt;/td>
&lt;td>If set to true, a Secondary Server should automatically notify another @sign user when a key has been shared with him/her. Please refer to the &lt;em>&lt;span style="text-decoration:underline;">notify &lt;/span>&lt;/em>verb spec for details.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>bufferLimit &lt;/strong>
&lt;/td>
&lt;td>Number of bytes
&lt;/td>
&lt;td>Maximum size of a value for a key that can be transferred to a Secondary Server
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>inbound_max_limit&lt;/strong>
&lt;/td>
&lt;td>An Integer
&lt;/td>
&lt;td>Maximum number of inbound connections that a Secondary Server can accept
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>outbound_max_limit&lt;/strong>
&lt;/td>
&lt;td>An Integer
&lt;/td>
&lt;td>Maximum number of outbound connections that a secondary can make to another Secondary Server
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>inbound_idle_time_millis&lt;/strong>
&lt;/td>
&lt;td>Time in milliseconds
&lt;/td>
&lt;td>Maximum time the inbound connection can be active
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>outbound_idle_time_millis&lt;/strong>
&lt;/td>
&lt;td>Time in milliseconds
&lt;/td>
&lt;td>Maximum time the outbound connection can be active.
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="block-list">Block List&lt;/h2>
&lt;p>A user of the Secondary Server should be able to decide who is allowed to connect to a Secondary Server. The &lt;code>config&lt;/code> verb should be used to configure this. Once added, a Secondary Server should honor the list at the time of accepting new connections from an @sign user using the &lt;code>from&lt;/code> verb.&lt;/p>
&lt;!-- ## Life Cycle -->
&lt;!-- &lt;TO DO: TBD: What I want to write is, A User of the secondary should be able to control pausing and resuming of a Secondary Server> -->
&lt;h2 id="verbs">Verbs&lt;/h2>
&lt;h3 id="the-from-verb">The &lt;code>from&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>from&lt;/code> verb is used to tell a secondary whom you claim to be.&lt;/p>
&lt;p>Following regex represents the syntax of the &lt;code>from&lt;/code> verb:&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>r'^from:(?&amp;lt;@sign&amp;gt;@?[^@\s]+$)' &lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user who is trying to connect is the owner of the Secondary Server, then the &lt;code>from&lt;/code> verb should respond with the following response.&lt;/p>
&lt;p>&lt;code>key:&amp;lt;sessionId@sign:uuid&amp;gt;&lt;/code>&lt;/p>
&lt;p>If the user who is trying to connect is not the owner of the Secondary Server, then the &lt;code>from&lt;/code> verb should respond with the following response.&lt;/p>
&lt;p>&lt;code>proof:&amp;lt;sessionid&amp;gt;@&amp;lt;@sign&amp;gt;:&amp;lt;UUID&amp;gt;&lt;/code>&lt;/p>
&lt;p>If the user is not allowed to connect to the Secondary Server, then it should respond back with the following error and close the connection to the server.&lt;/p>
&lt;p>&lt;code>error:AT0013-Connection Exception&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>from&lt;/code> verb is used to tell the Secondary Server what @sign you claim to be. With the &lt;code>from&lt;/code> verb, one can connect to one&amp;rsquo;s own Secondary Server or someone else&amp;rsquo;s Secondary Server. In both cases, the Secondary Server responds back with a challenge to prove that you are who you claim to be. This is part of the authentication mechanism of the @protocol.&lt;/p>
&lt;p>This authentication mechanism varies based on whether you are connecting to your own secondary (cram) or someone else&amp;rsquo;s secondary (pol).&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;&lt;/code>
Required: Yes
Description: @sign with which you are connecting to a Secondary Server.&lt;/p>
&lt;h3 id="the-cram-verb">The &lt;code>cram&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>cram&lt;/code> verb is used to boostrap authenticate one&amp;rsquo;s own self as an owner of a Secondary Server. It is
intended to be used once until a set of PKI keys are cut on the owner&amp;rsquo;s mobile device and from then on
we use the &lt;code>pkam&lt;/code> verb.&lt;/p>
&lt;p>The following regex represents the syntax of the &lt;code>cram&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>r'^cram:(?&amp;lt;digest&amp;gt;.+$)'&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user gets the challenge right, the prompt should change to the @sign of the user.&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;@&lt;/code>&lt;/p>
&lt;p>If the user gets the cram authentication wrong, then it should respond back with the following error and close the connection to the server.&lt;/p>
&lt;p>&lt;code>error:AT0401-Client authentication failed&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>cram&lt;/code> verb follows the &lt;code>from&lt;/code> verb. As an owner of the Secondary Server, you should be able to take the challenge thrown by the &lt;code>from&lt;/code> verb and encrypt using the shared key that the server has been bound with. Upon receiving the &lt;code>cram&lt;/code> verb along with the digest, the server decrypts the digest using the shared key and matches it with the challenge. If they are the same, then the secondary lets you connect to the Secondary Server and changes the prompt to your @sign.&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;digest&amp;gt; &lt;/code>
Required: Yes
Description: Encrypted challenge&lt;/p>
&lt;h3 id="the-pol-verb">The &lt;code>pol&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>pol&lt;/code> verb is part of the &lt;code>pkam&lt;/code> process to authenticate oneself while connecting to someone else&amp;rsquo;s Secondary Server. The term
&amp;lsquo;pol&amp;rsquo; means &amp;lsquo;proof of life&amp;rsquo; as it provides a near realtime assurance that the requestor is who it claims to be.&lt;/p>
&lt;p>Following regex represents the syntax of the &lt;code>pol&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>r'^pol$'&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user gets the challenge right the prompt should change to the @sign of the user.&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;@&lt;/code>&lt;/p>
&lt;p>If the user gets the cram authentication wrong then it should respond back with the following error and close the connection to the server.&lt;/p>
&lt;p>&lt;code>error:AT0401-Client authentication failed&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>pol&lt;/code> verb follows the &lt;code>from&lt;/code> verb. &amp;lsquo;pol&amp;rsquo; indicates another secondary that the user who is trying to connect is ready to authenticate himself. For example, if @bob is trying to connect to @alice, @bob would take the key and value from the proof response of the verb and create a public key and value which then can be looked up by @alice. After @alice looks up @bob&amp;rsquo;s secondary @alices secondary should change the prompt to @bob.&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>NA&lt;/p>
&lt;h3 id="the-update-verb">The &lt;code>update&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>update&lt;/code> verb is used to insert key/value pairs into a Key Store. An update can only be run by the owner of a Secondary Server on his/her own Secondary Server.&lt;/p>
&lt;p>Following regex represents the syntax of the &lt;code>update&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>r'^update:(?:ttl:(?&amp;lt;ttl&amp;gt;\d+):)?(?:ttb:(?&amp;lt;ttb&amp;gt;\d+):)?(?:ttr:(?&amp;lt;ttr&amp;gt;(-?)\d+):)?(ccd:(?&amp;lt;ccd&amp;gt;true|false):)?((?:public:)|(@(?&amp;lt;for@sign&amp;gt;[^@:\s]-):))?(?&amp;lt;atKey&amp;gt;[^:@]((?!:{2})[^@])+)(?:@(?&amp;lt;@sign&amp;gt;[^@\s]-))? (?&amp;lt;value&amp;gt;.+$)'&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>The Secondary Server should return the commit id from Commit Log if the update is successful.&lt;/p>
&lt;p>&lt;code>data:&amp;lt;CommitId&amp;gt;&lt;/code>&lt;/p>
&lt;p>If the user provides the invalid update command, then it should respond with the following error and close the connection to the server&lt;/p>
&lt;p>&lt;code>error:AT0003-Invalid Syntax&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>update&lt;/code> verb should be used to perform create/update operations on the Secondary Server. The &lt;code>update&lt;/code> verb requires the owner of the secondary to authenticate himself/herself to the Secondary Server using &lt;code>from&lt;/code> and &lt;code>cram&lt;/code> verbs.&lt;/p>
&lt;p>If a key has been created for another @sign user, the Secondary Server should honor &amp;ldquo;autoNotify&amp;rdquo; configuration parameter.&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;ttl&amp;gt;&lt;/code>
Required: No
Description: Time to live in milliseconds&lt;/p>
&lt;p>&lt;code>&amp;lt;ttb&amp;gt;&lt;/code>
Required: No
Description: Time to birth in milliseconds&lt;/p>
&lt;p>&lt;code>&amp;lt;ttr&amp;gt;&lt;/code>
Required: No
Description: Time to refresh in milliseconds.&lt;/p>
&lt;blockquote>
&lt;p>-1 is a valid value which indicates that the user with whom the key has been shared can keep it forever and the value for this key won&amp;rsquo;t change forever.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>&amp;lt;ccd&amp;gt;&lt;/code>
Required: No
Description: A value of &amp;ldquo;true&amp;rdquo; indicates that the cached key needs to be deleted when the @sign user who has originally shared it deletes it.&lt;/p>
&lt;p>&lt;code>&amp;lt;for@sign&amp;gt;&lt;/code>
Required: Yes (Not required when the key is a public key)
Description: @sign of the user with whom the key has been shared&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;&lt;/code>
Required: Yes
Description: @sign of the owner&lt;/p>
&lt;p>&lt;code>&amp;lt;value&amp;gt;&lt;/code>
Required: Yes
Description: Value for the key&lt;/p>
&lt;h3 id="the-updatemeta-verb">The &lt;code>update:meta&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>update:meta&lt;/code> verb should be used to update the metadata of a key @sign user without having to send or save the value again.&lt;/p>
&lt;p>Following is the regex for the &lt;code>update:meta&lt;/code> verb&lt;/p>
&lt;p>&lt;code>^update:meta:((?:public:)|((?&amp;lt;forAtSign&amp;gt;@?[^@\s]-):))?(?&amp;lt;atKey&amp;gt;((?!:{2})[^@])+)@(?&amp;lt;atSign&amp;gt;[^@:\s]-)(:ttl:(?&amp;lt;ttl&amp;gt;\d+))?(:ttb:(?&amp;lt;ttb&amp;gt;\d+))?(:ttr:(?&amp;lt;ttr&amp;gt;\d+))?(:ccd:(?&amp;lt;ccd&amp;gt;true|false))?(:isBinary:(?&amp;lt;isBinary&amp;gt;true|false))?(:isEncrypted:(?&amp;lt;isEncrypted&amp;gt;true|false))?$&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>The Secondary Server should return the commit id from Commit Log if the update is successful.&lt;/p>
&lt;p>&lt;code>data:&amp;lt;CommitId&amp;gt;&lt;/code>&lt;/p>
&lt;p>If the user provides the invalid update meta command, then it should respond with the following error and close the connection to the server&lt;/p>
&lt;p>&lt;code>error:AT0003-Invalid Syntax&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>update:meta&lt;/code> verb should be used to perform create/update operations on the Secondary Server. The &lt;code>update:meta&lt;/code> verb requires the owner of the secondary to authenticate himself/herself to the Secondary Server using &lt;code>from&lt;/code> and &lt;code>cram&lt;/code> verbs.&lt;/p>
&lt;p>The Secondary Server should allow creation of keys with null values. If a key has been created for another @sign user, the Secondary Server should honor &amp;ldquo;autoNotify&amp;rdquo; configuration parameter.&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;ttl&amp;gt;&lt;/code>
Required: No
Description: Time to live in milliseconds&lt;/p>
&lt;p>&lt;code>&amp;lt;ttb&amp;gt; &lt;/code>
Required: No
Description: Time to birth in milliseconds&lt;/p>
&lt;p>&lt;code>&amp;lt;ttr&amp;gt; &lt;/code>
Required: No
Description: Time to refresh in milliseconds.&lt;/p>
&lt;blockquote>
&lt;p>-1 is a valid value which indicates that the user with whom the key has been shared can keep it forever and the value for this key won&amp;rsquo;t change forever.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>&amp;lt;ccd&amp;gt;&lt;/code>
Required: No
Description: A value of &amp;ldquo;true&amp;rdquo; indicates that the cached key needs to be deleted when the @sign user who has originally shared it deletes it.&lt;/p>
&lt;p>&lt;code>&amp;lt;for@sign&amp;gt;&lt;/code>
Required: Yes (Not required when the key is a public key)
Description: @sign of the user with whom the key has been shared&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;&lt;/code>
Required: Yes
Description: @sign of the owner&lt;/p>
&lt;h3 id="the-lookup-verb">The &lt;code>lookup&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>lookup&lt;/code> verb should be used to lookup the value shared by another @sign user.&lt;/p>
&lt;p>The following is the regex of the &lt;code>lookup&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>lookup:((?&amp;lt;operation&amp;gt;meta|all):)?(?&amp;lt;atKey&amp;gt;(?:[^:]).+)@(?&amp;lt;@sign&amp;gt;[^@\s]+)$&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the operation is not specified the Secondary Server should just respond back with the value saved by the user as is.&lt;/p>
&lt;p>&lt;code>data:&amp;lt;value&amp;gt;&lt;/code>&lt;/p>
&lt;p>If the operation is to lookup the metadata only then the result should be wrapped in a JSON in the following format:&lt;/p>
&lt;p>&lt;code>data:&amp;lt;Metadata in a JSON&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a40000">data:&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;createdBy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;@bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;updatedBy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;@bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;createdAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:48.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;updatedAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:48.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;availableAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;null&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;expiresAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;null&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;refreshAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:58.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;active&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttb&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttr&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ccd&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;isBinary&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;isEncrypted&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the operation is to lookup the metadata and the data together then the result should be wrapped in a JSON in the following format:&lt;/p>
&lt;p>&lt;code>data:&amp;lt;Value and Metadata in a JSON&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#a40000">data:&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;key&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;@alice:country@bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;data&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;USA&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;metaData&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;createdBy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;@bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;updatedBy&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;@bob&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;createdAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:48.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;updatedAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:48.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;availableAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;null&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;expiresAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;null&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;refreshAt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;2020-10-21 09:46:58.982Z&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;status&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;active&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;version&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttb&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ttr&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;ccd&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;isBinary&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">&amp;#34;isEncrypted&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the other Secondary Server on which the lookup needs to be performed is down then the secondary should return the following error and keep the connection alive.&lt;/p>
&lt;p>&lt;code>error:AT0007-Secondary Server not found.&lt;/code>&lt;/p>
&lt;p>If the lookup command is not valid, then the Secondary Server should return the following error and close the connection:&lt;/p>
&lt;p>&lt;code>error:AT0003-Invalid Syntax&lt;/code>&lt;/p>
&lt;p>For whatever reasons, If the handshake with another secondary fails, then the Secondary Server should return the following error:&lt;/p>
&lt;p>&lt;code>data:AT0008-Handshake failure&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>:&lt;/p>
&lt;p>The &lt;code>lookup&lt;/code> verb should be used to fetch the value of the key shared by another @sign user. If there is a public and user key with the same name then the result should be based on whether the user is trying to lookup is authenticated or not. If the user is authenticated then the user key has to be returned, otherwise the public key has to be returned.&lt;/p>
&lt;h3 id="the-plookup-verb">The &lt;code>plookup&lt;/code> verb:&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>plookup&lt;/code> verb enables to lookup the value of the public key shared by another @sign user.&lt;/p>
&lt;p>Following is the regex of the &lt;code>plookup&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>^plookup:((?&amp;lt;operation&amp;gt;meta|all):)?(?&amp;lt;atKey&amp;gt;[^@\s]+)@(?&amp;lt;@sign&amp;gt;[^@\s]+)$&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>The Secondary Server should return the value or metadata or the value and metadata together based on the option specified.&lt;/p>
&lt;p>The response structure should be exactly the same as the &lt;code>lookup&lt;/code> verb.&lt;/p>
&lt;p>If the other Secondary Server on which the &lt;code>lookup&lt;/code> needs to be performed is not available, then the secondary should return the following error and keep the connection alive.&lt;/p>
&lt;p>&lt;code>error:AT0007-Secondary Server not found.&lt;/code>&lt;/p>
&lt;p>If the &lt;code>lookup&lt;/code> command is not valid, then the Secondary Server should return the following error and close the connection:&lt;/p>
&lt;p>&lt;code>error:AT0003-Invalid Syntax&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>:&lt;/p>
&lt;p>The &lt;code>plookup&lt;/code> verb should be used to fetch the value of the public key shared by another @sign user.&lt;/p>
&lt;h3 id="the-llookup-verb">The &lt;code>llookup&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>llookup&lt;/code> verb should be used to look up one&amp;rsquo;s own secondary and this should return the value as is (i.e. without any resolution).&lt;/p>
&lt;p>The Following is the regex of the &lt;code>llookup&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>^llookup:((?&amp;lt;operation&amp;gt;meta|all):)?(?:cached:)?((?:public:)|(@(?&amp;lt;for@sign&amp;gt;[^@:\s]-):))?(?&amp;lt;atKey&amp;gt;[^:]((?!:{2})[^@])+)@(?&amp;lt;@sign&amp;gt;[^@\s]+)$&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>The Secondary Server should return the value or metadata or the value and metadata together based on the option specified.&lt;/p>
&lt;p>The response structure should be exactly the same as the &lt;code>lookup&lt;/code> verb.&lt;/p>
&lt;p>If the other Secondary Server on which the lookup needs to be performed is down then the secondary should return the following error and keep the connection alive.&lt;/p>
&lt;p>&lt;code>error:AT0007-Secondary Server not found.&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>If the lookup command is not valid, then the Secondary Server should return the following error and close the connection:&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>error:AT0003-Invalid Syntax&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>:&lt;/p>
&lt;p>The &lt;code>llookup&lt;/code> verb should be used to fetch the value of the key in the owners secondary store as is without resolving it. For example if a key contains a reference as a value, the &lt;code>lookup&lt;/code> verb should resolve it to a value whereas llookup should return the value as is.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>If phone@bob is &amp;ldquo;1234&amp;rdquo; and altphone@bob is &amp;ldquo;atsign://phone@bob&amp;rdquo;,
then &lt;code>lookup&lt;/code> of altphone@bob should return &amp;ldquo;1234&amp;rdquo; whereas &lt;code>llookup&lt;/code> of altphone@bob should return &amp;ldquo;atsign://phone@bob&amp;rdquo;.&lt;/p>
&lt;h3 id="the-pkam-verb">The &lt;code>pkam&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>pkam&lt;/code> verb is used to authenticate one&amp;rsquo;s own self as an owner of a Secondary Server using a PKI style authentication.&lt;/p>
&lt;p>Following regex represents the syntax of the &lt;code>pkam&lt;/code> verb:&lt;/p>
&lt;p>&lt;code>^pkam:(?&amp;lt;signature&amp;gt;.+$)&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user gets the challenge right, the prompt should change to the @sign of the user.&lt;/p>
&lt;p>&lt;code>&amp;lt;@sign&amp;gt;@&lt;/code>&lt;/p>
&lt;p>If the user gets the pkam authentication wrong then it should respond back with the following error and close the connection to the server.&lt;/p>
&lt;p>&lt;code>error:AT0401-Client authentication failed&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>pkam&lt;/code> verb follows the &lt;code>from&lt;/code> verb. As an owner of the Secondary Server, you should be able to take the challenge thrown by the &lt;code>from&lt;/code> verb and encrypt using the private key of the RSA key pair with what the server has been bound with. Upon receiving the &lt;code>cram&lt;/code> verb along with the digest, the server decrypts the digest using the public key and matches it with the challenge. If they are the same then the secondary lets you connect to the Secondary Server and changes the prompt to your @sign.&lt;/p>
&lt;p>&lt;strong>OPTIONS:&lt;/strong>&lt;/p>
&lt;p>&lt;code>&amp;lt;digest&amp;gt; &lt;/code>
Required: Yes
Description: Encrypted challenge&lt;/p>
&lt;h3 id="the-stats-verb">The &lt;code>stats&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>stats&lt;/code> verb should be used to get the statistics of an atsign.&lt;/p>
&lt;p>Following is the regex of the &lt;code>stats&lt;/code> verb&lt;/p>
&lt;p>&lt;code>stats(?&amp;lt;statId&amp;gt;:((?!0)\d+)?(,(\d+))-)?&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user gives stats all the statistics will be returned as JSON. Following statistics are provided:&lt;/p>
&lt;ol>
&lt;li>&lt;code>activeInboundConnections&lt;/code>&lt;/li>
&lt;li>&lt;code>activeOutboundConnections&lt;/code>&lt;/li>
&lt;li>&lt;code>lastCommitId&lt;/code>&lt;/li>
&lt;li>&lt;code>secondaryStorageSize&lt;/code>&lt;/li>
&lt;li>&lt;code>topAtSigns&lt;/code>&lt;/li>
&lt;li>&lt;code>topKeys&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;p>&lt;code>data: [{&amp;quot;id&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;activeInboundConnections&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;1&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;activeOutboundConnections&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;0&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;3&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;lastCommitID&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;1&amp;quot;}, {&amp;quot;id&amp;quot;:&amp;quot;4&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;secondaryStorageSize&amp;quot;,&amp;quot;value&amp;quot;:12560}, {&amp;quot;id&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;topAtSigns&amp;quot;,&amp;quot;value&amp;quot;:{&amp;quot;@bob&amp;quot;:1}}, {&amp;quot;id&amp;quot;:&amp;quot;6&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;topKeys&amp;quot;,&amp;quot;value&amp;quot;:{&amp;quot;publickey@alice&amp;quot;:1}}]&lt;/code>&lt;/p>
&lt;p>Individual statistics can be retrieved using the respective Id.&lt;/p>
&lt;pre>&lt;code>@alice@stats:1
data: [{&amp;quot;id&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;activeInboundConnections&amp;quot;,&amp;quot;value&amp;quot;:&amp;quot;1&amp;quot;}]
&lt;/code>&lt;/pre>&lt;h3 id="the-sync-verb">The &lt;code>sync&lt;/code> verb&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>sync&lt;/code> verb enables to synchronize the keys between the local Secondary Server and remote Secondary Server.&lt;/p>
&lt;p>Following is the regex:&lt;/p>
&lt;p>&lt;code>sync:(?&amp;lt;from_commit_seq&amp;gt;[0-9]+$|-1)&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>sync&lt;/code> verb returns a json array of the commit entries from the given commit id to the current commit id. Further, The &lt;code>sync&lt;/code> verb accepts -1 as argument which returns all the commit entries.&lt;/p>
&lt;pre>&lt;code>data:[{&amp;quot;atKey&amp;quot;:&amp;quot;@bob:phone@alice&amp;quot;,&amp;quot;operation&amp;quot;:&amp;quot;+&amp;quot;,&amp;quot;opTime&amp;quot;:&amp;quot;2020-10-26 11:57:43.732&amp;quot;,&amp;quot;commitId&amp;quot;:0,&amp;quot;value&amp;quot;:&amp;quot;12345&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;ttr&amp;quot;:&amp;quot;36000000&amp;quot;,&amp;quot;ccd&amp;quot;:&amp;quot;false&amp;quot;}},
{&amp;quot;atKey&amp;quot;:&amp;quot;@bob:shared_key@alice&amp;quot;,&amp;quot;operation&amp;quot;:&amp;quot;-&amp;quot;,&amp;quot;opTime&amp;quot;:&amp;quot;2020-10-26 09:44:54.382219Z&amp;quot;,&amp;quot;commitId&amp;quot;:1}]
&lt;/code>&lt;/pre>&lt;p>The &lt;code>notify&lt;/code> verb&lt;/p>
&lt;p>The &lt;code>notify&lt;/code> verb enables us to notify the atsign user of some data event.&lt;/p>
&lt;p>The Following is the regex for the &lt;code>notify&lt;/code> verb&lt;/p>
&lt;p>&lt;code>notify:((?&amp;lt;operation&amp;gt;update|delete):)?(ttl:(?&amp;lt;ttl&amp;gt;\d+):)?(ttb:(?&amp;lt;ttb&amp;gt;\d+):)?(ttr:(?&amp;lt;ttr&amp;gt;(-)?\d+):)?(ccd:(?&amp;lt;ccd&amp;gt;true|false):)?(@(?&amp;lt;forAtSign&amp;gt;[^@:\s]-)):(?&amp;lt;atKey&amp;gt;[^:]((?!:{2})[^@])+)@(?&amp;lt;atSign&amp;gt;[^@:\s]+)(:(?&amp;lt;value&amp;gt;.+))?&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>When a key is notified successfully, returns&lt;/p>
&lt;p>&lt;code>data:success&lt;/code>&lt;/p>
&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>When an atsign user notifies the key to another atsign user, an entry has to be created in received notifications list on the user who has shared the key and an entry has to be created in sent notifications list on the user to whom the key is to be notified. When auto notify is set to true, when a key is created/updated and deleted notification is triggered to another atsign user.&lt;/p>
&lt;h3 id="notify-list">Notify List&lt;/h3>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>Notify list returns a list of notifications.&lt;/p>
&lt;p>Following is the regex&lt;/p>
&lt;p>&lt;code>notify:(list (?&amp;lt;regex&amp;gt;.-)|list$)&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>If the user is the owner, returns a list of received notifications. If a user is pol authenticated user, returns a list of sent notifications&lt;/p>
&lt;p>&lt;code>data:[{&amp;quot;id&amp;quot;:&amp;quot;0e5e9e89-c9cb-423b-8972-8c5487215990&amp;quot;,&amp;quot;from&amp;quot;:&amp;quot;@alice&amp;quot;,&amp;quot;to&amp;quot;:&amp;quot;@bob&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;@bob:phone@alice&amp;quot;,&amp;quot;value&amp;quot;:12345,&amp;quot;operation&amp;quot;:&amp;quot;update&amp;quot;,&amp;quot;epochMillis&amp;quot;:1603714122636}]&lt;/code>&lt;/p>
&lt;p>The &lt;code>monitor&lt;/code> Verb&lt;/p>
&lt;p>&lt;strong>Synopsis:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>monitor&lt;/code> verb streams received notifications.&lt;/p>
&lt;p>Following is the regex&lt;/p>
&lt;p>&lt;code>^monitor$|^monitor ?(?&amp;lt;regex&amp;gt;.-)?)$&lt;/code>&lt;/p>
&lt;p>&lt;strong>Response:&lt;/strong>&lt;/p>
&lt;p>Returns a stream of notifications.&lt;/p>
&lt;pre>&lt;code>@alice@monitor
notification: {&amp;quot;id&amp;quot;:&amp;quot;773e226d-dac2-4269-b1ee-64d7ce93a42f&amp;quot;,&amp;quot;from&amp;quot;:&amp;quot;@bob&amp;quot;,&amp;quot;to&amp;quot;:&amp;quot;@alice&amp;quot;,&amp;quot;key&amp;quot;:&amp;quot;@alice:phone@bob&amp;quot;,&amp;quot;value&amp;quot;:null,&amp;quot;operation&amp;quot;:&amp;quot;update&amp;quot;,&amp;quot;epochMillis&amp;quot;:1603714720965}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Description:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>monitor&lt;/code> verb accepts an optional parameter to filter the notifications by passing filter criteria as regex to &lt;code>monitor&lt;/code> verb.&lt;/p>
&lt;h2 id="error-codes">Error Codes&lt;/h2>
&lt;table>
&lt;tr>
&lt;td>
&lt;strong>Error Code&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Error Message&lt;/strong>
&lt;/td>
&lt;td>&lt;strong>Description&lt;/strong>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0001
&lt;/td>
&lt;td>Server exception
&lt;/td>
&lt;td>Exception occurs when there is an issue while starting the server.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0002
&lt;/td>
&lt;td>DataStore exception
&lt;/td>
&lt;td>Exception occurs during keystore operations (GET/PUT/DELETE).
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0003
&lt;/td>
&lt;td>Invalid syntax
&lt;/td>
&lt;td>Exception occurs if we give any invalid command to the server.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0004
&lt;/td>
&lt;td>Socket error
&lt;/td>
&lt;td>Exception occurs when socket connection to secondary cannot be established.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0005
&lt;/td>
&lt;td>Buffer limit exceeded
&lt;/td>
&lt;td>This exception occurs when input/output message size reaches the maximum limit configured in the server.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0006
&lt;/td>
&lt;td>Outbound connection limit exceeded
&lt;/td>
&lt;td>Exception occurs when the number of open connections to other secondaries reaches the maximum limit configured.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0007
&lt;/td>
&lt;td>Secondary Server not found
&lt;/td>
&lt;td>Exception occurs when a secondary tries to connect to another secondary which is not available in the root directory or not yet instantiated.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0008
&lt;/td>
&lt;td>Handshake failure
&lt;/td>
&lt;td>This exception is for any exception during the handshake process of two secondaries.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0009
&lt;/td>
&lt;td>UnAuthorized client in the request
&lt;/td>
&lt;td>UnAuthorized Exception
&lt;p>will occur when an unsuccessful handshake happens between two secondaries.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0010
&lt;/td>
&lt;td>Internal server error
&lt;/td>
&lt;td>This is for any server related errors.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0011
&lt;/td>
&lt;td>Internal server exception
&lt;/td>
&lt;td>This exception is used for any server related exceptions.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0012
&lt;/td>
&lt;td>Inbound connection limit exceeded
&lt;/td>
&lt;td>This exception will occur when the number of active clients reaches the maximum limit configured.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0401
&lt;/td>
&lt;td>Client authentication failed
&lt;/td>
&lt;td>This exception occurs when client authentication fails or client tries to execute any verb which needs authentication before successful authentication.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0013
&lt;/td>
&lt;td>Connection Exception
&lt;/td>
&lt;td>This will occur when a blocked user tries to connect to the secondary.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0014
&lt;/td>
&lt;td>Unknown AtClient exception
&lt;/td>
&lt;td>This exception will be thrown while performing any operations(Get/update/delete) using AtClient SDK.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0015
&lt;/td>
&lt;td>Key not found
&lt;/td>
&lt;td>This exception will be thrown when the key is not available for encryption/decryption.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AT0021
&lt;/td>
&lt;td>Unable to connect to secondary
&lt;/td>
&lt;td>This exception will occur when we are unable to connect to secondary.
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>Glossary&lt;/p>
&lt;blockquote>
&lt;p>@protocol (Pronounced, at protocol)
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>@sign (Pronounced, at sign)
@sign is a unique name that a user gets when enrolled with @sign.com&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Root Server
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Secondary Server
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Verb
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Public Key
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Private Key
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Shared Secret
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Default Keys
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Key
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Value
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Metadata
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Commit Log
&lt;TO DO>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Access Log
&lt;TO DO>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Flutter packages</title><link>https://devstaging.atsign.wtf/docs/packages/flutter/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/packages/flutter/</guid><description>
&lt;h3 id="at_app_flutter">at_app_flutter&lt;/h3>
&lt;p>A library that help developers build flutter applications on the @platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_app_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_backupkey_flutter">at_backupkey_flutter&lt;/h3>
&lt;p>A Flutter plugin project for saving the backup key of any @‎sign that is being onboarded with @‎platform apps. The backup key can be used to authenticate in other @‎platform apps.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_backupkey_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_chat_flutter">at_chat_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide a chat feature between @‎signs built on the @‎platform to any Flutter application.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_chat_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_common_flutter">at_common_flutter&lt;/h3>
&lt;p>A Flutter package to provide common widgets used by other @‎platform Flutter packages.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_common_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_flutter">at_contacts_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide ease of managing contacts for an @‎sign using @p‎latform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_group_flutter">at_contacts_group_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide group functionality with contacts using @‎platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_group_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_events_flutter">at_events_flutter&lt;/h3>
&lt;p>A Flutter plugin project to manage events (time, place and attendees) using the @‎platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_events_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_follows_flutter">at_follows_flutter&lt;/h3>
&lt;p>A Flutter plugin project that provides a basic social &amp;ldquo;follows&amp;rdquo; functionality for @signs. Provides a list of followers and following for @signs with the option to unfollow them.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_follows_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_invitation_flutter">at_invitation_flutter&lt;/h3>
&lt;p>A Flutter package to invite contacts into apps that use @protocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_invitation_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_location_flutter">at_location_flutter&lt;/h3>
&lt;p>A Flutter plugin project to share locations between two @‎signs and track them on OSM (OpenStreetMap).&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_location_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_notify_flutter">at_notify_flutter&lt;/h3>
&lt;p>A Flutter plugin project to send notification to any @‎sign in @‎platform apps with ease.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_notify_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_onboarding_flutter">at_onboarding_flutter&lt;/h3>
&lt;p>A Flutter plugin project for onboarding any @‎sign in @‎platform apps with ease. Provides a QRscanner option and an upload key file option to authenticate.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_onboarding_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_sync_ui_flutter">at_sync_ui_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide UI widgets for displaying status of sync process in @protocol apps.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_sync_ui_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_theme_flutter">at_theme_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide theme selection in @‎platform apps with ease.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_theme_flutter">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: How to migrate?</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/migration_uptake/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/migration_uptake/</guid><description>
&lt;p>If you have gone through the &lt;a href="https://devstaging.atsign.wtf/docs/rsdk_migration/changes">rSDK changes&lt;/a>,
migrating your app will be easy. If you are ready to migrate your project to
latest rSDK changes, then you are good to go.&lt;/p>
&lt;h2 id="get-instance-of-atclient">Get instance of atClient.&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>AtClientImpl&lt;/code> has been replace with &lt;code>AtClientManager&lt;/code> instance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>createClient&lt;/code> method has been removed and replaced with &lt;code>setCurrentAtSign&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>atClient&lt;/code> instance can be obtained through &lt;code>atClientManager&lt;/code> instance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 2.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">AtClientImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">createClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">preference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">AtClientImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 3.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">setCurrentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">preference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="starting-listening-to-notifications">Starting listening to notifications.&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>startMonitor&lt;/code> method has been removed. With rSDK you must subscribe and listen to &lt;code>atClient&lt;/code> instance&amp;rsquo;s &lt;code>NotificationService&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>subscribe&lt;/code> method takes a optional parameter &lt;code>regex&lt;/code> to filter the notifications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Decoding the response on callback function is not required.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 2.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">startMonitor&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">private_key&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_notificationCallBack&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#f57900">regex:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;atmosphere&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">_notificationCallBack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">replaceFirst&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;notification:&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">responseJson&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">jsonDecode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">notificationKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">responseJson&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;key&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">fromAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">responseJson&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;from&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ....... REST CODE .......
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 3.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">regex:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">_notificationCallBack&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">_notificationCallBack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">AtNotification&lt;/span> &lt;span style="color:#000">atNotification&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">notificationKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atNotification&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">fromAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atNotification&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">from&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ....... REST CODE .......
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="send-notifications">Send notifications.&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>To send notification, you must use &lt;code>AtClientManager&lt;/code> instance&amp;rsquo;s
&lt;code>NotificationService&lt;/code> to access &lt;code>notify&lt;/code> method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>notify&lt;/code> method takes a positional parameter &lt;code>NotificationParams&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>NotificationParams&lt;/code> has all the methods depending to the operation you
do.&lt;/p>
&lt;ul>
&lt;li>&lt;code>forUpdate()&lt;/code> - To send update notification.&lt;/li>
&lt;li>&lt;code>forDelete()&lt;/code> - To send delete notification.&lt;/li>
&lt;li>&lt;code>forText()&lt;/code> - To send a text message to another atSign.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 2.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">AtClientImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">createClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">preference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">AtClientImpl&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">atKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;phone&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@bob&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">atValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;+1 445 446 7879&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">atValue&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">OperationEnum&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">update&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 3.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">AtClientManager&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setCurrentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#a40000">‘@&lt;/span>&lt;span style="color:#000">alice&lt;/span>&lt;span style="color:#a40000">’&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;wavi&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">preference&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">AtClient&lt;/span> &lt;span style="color:#000">atClient&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">atKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;phone&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@bob&amp;#39;&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;@alice&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">atValue&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;+1 445 446 7879&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">NotificationResult&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forUpdate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#f57900">value:&lt;/span> &lt;span style="color:#000">atValue&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="check-whether-local-and-remote-server-are-in-sync">Check whether local and remote server are in sync.&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Instead of using &lt;code>SyncManager&lt;/code>, use &lt;code>SyncService&lt;/code> to access &lt;code>isInSync&lt;/code>
method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You must use &lt;code>AtClientManager&lt;/code> instance&amp;rsquo;s &lt;code>SyncService&lt;/code> to access
&lt;code>isInSync&lt;/code> method.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 2.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">syncManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getSyncManager&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">isInSync&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">syncManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isInSync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 3.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">syncService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">isInSync&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">isInSync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="calling-on-demand-sync">Calling on demand sync.&lt;/h2>
&lt;ul>
&lt;li>This may not be needed by all apps with new SDK changes. sync is performed
automatically on any update/delete operation on atClient.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 2.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">syncManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getSyncManager&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">syncManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// **SDK 3.X**
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">syncService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: The @platform FAQs</title><link>https://devstaging.atsign.wtf/docs/overview/faqs/about/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/faqs/about/</guid><description>
&lt;h3 id="our-mission">Our Mission&lt;/h3>
&lt;p>Now&amp;rsquo;s your chance to bring your app idea to life. Our free, open source platform makes it easy to create end-to-end encrypted apps that are surveillance-free and private by design — no backend infrastructure required. Our entire community is here to help you build, launch and monetize an amazing app experience for your customers.&lt;/p>
&lt;h4 id="why-should-i-trust-you-atsign-and-your-systems">Why should I trust you (Atsign) and your systems?&lt;/h4>
&lt;p>Trust certainly has to be earned, so we have started with an open protocol specification and an open source reference implementation for the full stack platform that everyone can evaluate and contribute to. As a company, the only thing we are uniquely responsible for is the integrity of the namespace, which does not hold any private information.&lt;/p>
&lt;p>The only thing that we have centralized is the verified location of where to go to request permission for access to information from someone. Our basis for trust in our company and the systems and services we provide relies on the fact that we do not have access by any means to anyone’s private data.&lt;/p>
&lt;h4 id="what-makes-the-platform-secure">What makes the @platform secure?&lt;/h4>
&lt;p>We do not want to be the Google of identity. We want each person to be able to own and control access to their own data. The first principle for us is:&lt;/p>
&lt;p>“It is probably true that Atsign cannot access your private information without your explicit permission.”&lt;/p>
&lt;p>The owners of @signs hold the keys for both access and encryption, and nobody else—including Atsign—has access to them. Thus, only two entities in the universe — the entity that shares information and the entity that receives it — can access private information that is shared between them.&lt;/p>
&lt;h4 id="whats-to-prevent-a-malicious-app-from-misusing-the-data-produced-through-my-app">What’s to prevent a malicious app from misusing the data produced through my app?&lt;/h4>
&lt;p>Our strategy for preventing a malicious app from screwing with data at the moment is to review and certify applications to eliminate such behavior. We also have an ambition to automate the process as much as we can. We are currently evaluating how to control app level access (read and write) to data using a namespace convention, which is already a part of the @protocol spec and reference implementation.&lt;/p>
&lt;h4 id="who-would-you-regard-as-your-main-competitors-and-how-are-you-different">Who would you regard as your main competitors and how are you different?&lt;/h4>
&lt;p>Notionally the blockchain cohort making similar claims would be the main ones, but we believe that they are more likely to become adopters over time to provide non-repudiation and to eliminate username/password authentication which has proven to be so risky. Technically, Solid/Inrupt is somewhat similar with their data pods, but they curiously have no built-in encryption at all and are enterprise focused where we are developer/apps/consumer focused.&lt;/p></description></item><item><title>Docs: at_chats</title><link>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_chats/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_chats/</guid><description>
&lt;p>The at_chat_flutter widget offers a messaging experience that is unique to the @platform. In a traditional messaging application, your texts are stored in a remote database and the person you’re pinging pulls the texts from there (a bit unsettling if you think about it). Of course, there is no such thing as a remote database in the @platform, so we had to be a bit clever coming up with a messaging scheme. In a nutshell, your text messages are not “sent” but rather “shared” with another @sign. All your texts are stored securely in your secondary server and never leave; if you decide to send a message to someone, that person is given permission to view that text via the notify verb. You can see use cases of the notify verb in the &lt;a href="https://devstaging.atsign.wtf/docs/sample-apps/at_cookbook/">at_cookbook&lt;/a> sample app.&lt;/p>
&lt;p>Below, you can see a small demonstration of how the at_chats application works.&lt;/p>
&lt;p align="center">
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/at_chats_demo.gif" alt="at_chats" height= "520px" width= "300px"/>
&lt;/p>
&lt;div style= "background-color:#F05F3E;color:white; min-height:100px;width:200px;position:relative; float:right;padding:10px;margin-bottom:20px;margin-left: 20px;">
&lt;h3> tl;dr &lt;/h3>
Overview too long for you? Watch the &lt;u>
&lt;a href="https://www.youtube.com/watch?v=yJ1tYsIbvq8" style="color: white;">Tyler Time&lt;/a>&lt;/u> episode that covers this instead!
&lt;/div>
&lt;h2 id="overview-of-the-at_chats-app">Overview of the at_chats app&lt;/h2>
&lt;p>Although this messaging dynamic might sound a bit involved, set up is quite easy! To get a feel for using the “Chatting” widget, it’s best to follow along with the at_chats demo application.&lt;/p>
&lt;p>The general flow of all @platform widgets is onboarding an @sign =&amp;gt; initializing the service object =&amp;gt; creating the actual widgets. Assuming we’ve already onboarded an @sign, let’s look at the steps to initialize our chat service:&lt;/p>
&lt;p>(The following code snippets are taken directly from at_chats. While there will be explanations, don’t worry too much about all the variables!)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">getAtSignAndInitializeChat&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// In the at_chats app, the onboarded @sign is displayed at the top
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// of the Second Screen. We set that @sign to [currentAtSign].
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">currentAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Set [activeAtSign], which is the variable that gets displayed, to
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// [currentAtSign] using setState(() {}).
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">activeAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">currentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Initialize a List of Strings called [allAtSigns] that we will
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// eventually display in the dropdown on the Second Screen. Here, we
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// simply pull an existing List from the at_demo_data dependency.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">at_demo_data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">allAtsigns&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// We want to remove the [activeAtSign] from this List because we
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// can&amp;#39;t chat with ourselves!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Again, call setState(() {}) to assign [allAtSigns] to the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// variable [atSigns] that will be used in the dropdown widget.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">atSigns&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// This is the only at_chat_flutter related function!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// initializeChatService takes in an AtClientImpl instance, the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// currently onboarded @sign, and the root domain for this project.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// As its name suggest, this function will prepare the chat service
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// for us.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">initializeChatService&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">rootDomain:&lt;/span> &lt;span style="color:#000">MixedConstants&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ROOT_DOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because getAtSignandInitializeChat() is an initialization function, it is best to call it in the initState() function at the top of the _SecondScreenState class. The only other thing we need to do before calling the “Chatting” widget is deciding who we’d like to chat with.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">setAtsignToChatWith&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// This function is as simple as calling the setChatWithAtSign()
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// function from the at_chat_flutter dependency with
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// [chatWithAtSign] passed in! [chatWithAtSign] is simply the @sign
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// that a user selects from the dropdown on the screen.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setChatWithAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chatWithAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We won’t want to call setAtsignToChatWith() in initState() because the function won’t know which @sign we’re communicating with until the individual selects it from the dropdown widget. Instead, it makes the most sense to place this function in the button (FlatButton for the at_chats app) that determines the navigation to the next screen. For at_chats, clicking the “Chat options” FlatButton will check to make sure that the “chatWithAtSign” variable is populated before it calls setAtsignToChatWith() and switches the “showOptions” variable to true, which allows the individual to see the two options for viewing the chatbox.&lt;/p>
&lt;p>Now, for the moment of truth: once we’ve initialized the chat service, how do we create the actual chat screen? In most tutorials, you’ll probably be guided through a UI-heavy demo of different chatbox components and pairing a backend service. With the @platform, however, it’s really just one line of code:&lt;/p>
&lt;p>(This snippet is directly from third_screen.dart in the at_chats project!)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">_ThirdScreenState&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">State&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ThirdScreen&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">override&lt;/span>
&lt;span style="color:#000">Widget&lt;/span> &lt;span style="color:#000">build&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BuildContext&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Scaffold&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">appBar:&lt;/span> &lt;span style="color:#000">AppBar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">title:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Chat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// You can simply set the body parameter of Scaffold widget
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// to the ChatScreen widget from the at_chat_flutter dependency!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">body:&lt;/span> &lt;span style="color:#000">ChatScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Optional parameters to customize your ChatScreen widget.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// You can find the full list of parameters in our Github
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// under the at_widgets repository.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">height:&lt;/span> &lt;span style="color:#000">MediaQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">of&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">incomingMessageColor:&lt;/span> &lt;span style="color:#000">Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">blue&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#f57900">outgoingMessageColor:&lt;/span> &lt;span style="color:#000">Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">green&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#f57900">isScreen:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By initializing the chat service and calling the ChatScreen() widget, you can make a fully-functioning one-to-one messaging application! While the ChatScreen widget offers a number of ways to customize your chatbox, if you’d like to build your own widget from scratch, you can use the at_chat_flutter dependency as a basis for creating your personal chat library that works with the @platform.&lt;/p></description></item><item><title>Docs: Set up the @platform virtual environment</title><link>https://devstaging.atsign.wtf/docs/archives/guides/the-virtual-environment/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/the-virtual-environment/</guid><description>
&lt;p>Why is there a virtual environment to set up, and what does it do? Jumping directly into the deep end and creating projects on top of the @platform can be overwhelming, so we have made a simple way for you to run the @platform from your machine.&lt;/p>
&lt;p>First, why is there a virtual environment to set up, and what does it do?&lt;/p>
&lt;p>The virtual environment has two main benefits: you can monitor the status of your test secondary servers (by visiting localhost:9001), and you can bypass the traditional onboarding process completely.&lt;/p>
&lt;p>Jumping directly into the deep-end and creating projects on top of the @platform can be overwhelming for some. To combat this overwhelming feeling, we have created a simple way to have you run the @protocol from your very own machine!&lt;/p>
&lt;p>This will allow you to run both a &lt;a href="https://devstaging.atsign.wtf/docs/resources/glossary/#root-server">root server&lt;/a> and &lt;a href="https://devstaging.atsign.wtf/docs/resources/glossary/#secondary-server">secondary servers&lt;/a> of testable @signs. We have created demo apps that go over specific verbs and methods to help you get oriented.&lt;/p>
&lt;h2 id="setup-virtual-environment">Setup Virtual Environment&lt;/h2>
&lt;!-- Cards for different OS-->
&lt;div class="card-deck mb-8">
&lt;!-- Windows Card-->
&lt;a class="card" id="install-windows" href="#windows" style="border-style: solid;border-color: #F05F3E">
&lt;div class="card-body">
&lt;header class="card-title text-center m-0">
&lt;span class="d-block h1">
&lt;i class="fab fa-windows" style="color: #F05F3E">&lt;/i>
&lt;/span>
&lt;span class="text-muted text-nowrap">Windows&lt;/span>
&lt;/header>
&lt;/div>
&lt;/a>
&lt;!-- MacOs Card-->
&lt;a class="card" id="install-macos" href="#macos" style="border-style: solid;border-color: #F05F3E">
&lt;div class="card-body">
&lt;header class="card-title text-center m-0">
&lt;span class="d-block h1">
&lt;i class="fab fa-apple" style="color: #F05F3E">&lt;/i>
&lt;/span>
&lt;span class="text-muted text-nowrap">macOS&lt;/span>
&lt;/header>
&lt;/div>
&lt;/a>
&lt;!-- Linux Card-->
&lt;a class="card" id="install-linux" href="#linux" style="border-style: solid;border-color: #F05F3E">
&lt;div class="card-body">
&lt;header class="card-title text-center m-0">
&lt;span class="d-block h1">
&lt;i class="fab fa-linux" style="color: #F05F3E">&lt;/i>
&lt;/span>
&lt;span class="text-muted text-nowrap">Linux&lt;/span>
&lt;/header>
&lt;/div>
&lt;/a>
&lt;/div>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>Your machine&amp;rsquo;s BIOS may already have virtualization enabled. You can check &lt;a href="https://2nwiki.2n.cz/pages/viewpage.action?pageId=75202968#:~:text=Press%20the%20F10%20key%20for,to%20save%20changes%20and%20Reboot">here&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Please ensure that you have &lt;a href="https://devstaging.atsign.wtf/docs/get-started/#docker-desktop">Docker&lt;/a> up and running before you proceed.
&lt;/div>
&lt;p>&lt;strong>Loopback adapter&lt;/strong>&lt;/p>
&lt;p>Install the Microsoft loopback adapter and configure it. Here&amp;rsquo;s a video showing how:&lt;/p>
&lt;iframe src="https://player.vimeo.com/video/506374699?title=0&amp;amp;byline=0&amp;amp;portrait=0" class="video-frame" style="position:relative;top:0;left:-20px;width:750px;height:400px;" frameborder="0" allow="autoplay; fullscreen" allowfullscreen="true">&lt;/iframe>
&lt;p>&lt;strong>Start up the at_virtual_environment&lt;/strong>&lt;/p>
&lt;p>Run cmd and enter the following commands. You can run cmd by using the Windows key and the r key then typing cmd.&lt;/p>
&lt;pre>&lt;code>mkdir ve
cd ve
curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml
&lt;/code>&lt;/pre>&lt;p>Now you are ready to spin up the docker containers:&lt;/p>
&lt;pre>&lt;code>docker-compose up -d
&lt;/code>&lt;/pre>&lt;p>Okay, you&amp;rsquo;re up. Now you can check the &lt;a href="http://localhost:9001/">http://localhost:9001/&lt;/a>.&lt;/p>
&lt;p>Not sure what to do now? Try &lt;a href="https://devstaging.atsign.wtf/docs/get-started/the-virtual-environment/#where-should-i-go-next">here&lt;/a>!&lt;/p>
&lt;h3 id="macos">MacOS&lt;/h3>
&lt;h4 id="configure-network-adapter">Configure Network Adapter&lt;/h4>
&lt;p>Open the Terminal window and enter this command. This permanently puts the Virtual IP address in place. You only need to run this once!&lt;/p>
&lt;pre>&lt;code>sudo curl -L atsign.dev/curl/atloop.plist -o /Library/LaunchDaemons/atloop.plist &amp;amp;&amp;amp; \
&lt;/code>&lt;/pre>&lt;p>Once you enter the above command, an arrow “&amp;gt;” should show up to enter the next line:&lt;/p>
&lt;pre>&lt;code>sudo launchctl load /Library/LaunchDaemons/atloop.plist
&lt;/code>&lt;/pre>&lt;p>The command line may ask you to enter your password. Go ahead and fill it in if this happens.&lt;/p>
&lt;h4 id="start-up-the-virtual-environment">Start up the Virtual Environment&lt;/h4>
&lt;p>Make a new directory called “ve” and run the curl command inside of it:&lt;/p>
&lt;pre>&lt;code>mkdir ve
cd ve
curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml
&lt;/code>&lt;/pre>&lt;p>Now you are ready to spin up the docker containers:&lt;/p>
&lt;pre>&lt;code>docker-compose up -d
&lt;/code>&lt;/pre>&lt;p>Not sure what to do now? Try &lt;a href="https://devstaging.atsign.wtf/docs/get-started/the-virtual-environment/#where-should-i-go-next">here&lt;/a>!&lt;/p>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>&lt;strong>Configure Network Adapter&lt;/strong>&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Please ensure that you have &lt;a href="https://www.docker.com/">Docker&lt;/a> up and running before you proceed.
&lt;/div>
&lt;p>Open the Terminal window and enter this command. This permanently puts the Virtual IP address in place. You only need to run this once!&lt;/p>
&lt;pre>&lt;code>curl -L atsign.dev/curl/rc.local -o setvip.sh
sudo ip addr add 10.64.64.64/32 dev lo
sudo nano /etc/rc.local
&lt;/code>&lt;/pre>&lt;p>If the file “/etc/rc.local” is empty, then add the contents of the file “setvip.sh” to /etc/rc.local”. If rc.local already has content, then add the line “ip addr add 10.64.64.64/32 dev lo” above any lines that say “exit 0”. This will ensure that the virtual IP is in place even after a reboot. Ensure the permissions are correct with the following command:&lt;/p>
&lt;pre>&lt;code>sudo chmod 744 /etc/rc.local
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Start up the Virtual Environment&lt;/strong>&lt;/p>
&lt;p>Make a new directory called “ve” and run the curl command inside of it:&lt;/p>
&lt;pre>&lt;code>cd ~
mkdir ve
cd ve
curl -L atsign.dev/curl/virtualenv-compose-vip.yaml -o docker-compose.yaml
&lt;/code>&lt;/pre>&lt;p>Now you are ready to spin up the docker containers:&lt;/p>
&lt;pre>&lt;code>docker-compose up -d
&lt;/code>&lt;/pre>&lt;p>Okay, you&amp;rsquo;re up. Now you can check the &lt;a href="http://localhost:9001/">http://localhost:9001/&lt;/a>.&lt;/p>
&lt;p>Not sure what to do now? Try &lt;a href="https://devstaging.atsign.wtf/docs/get-started/the-virtual-environment/#where-should-i-go-next">here&lt;/a>!&lt;/p>
&lt;h3 id="to-pull-latest-virtual-environment-version">To Pull Latest Virtual Environment Version&lt;/h3>
&lt;pre>&lt;code>docker-compose down
docker-compose pull
docker-compose up -d
&lt;/code>&lt;/pre>&lt;p>Congratulations! You’ve set up your virtual environment and can now experiment with the hello_world app. Now you can start building your very own privacy-conscious apps.&lt;/p>
&lt;p>When writing code, the only change needed to run in the virtual environment is changing the ROOT_DOMAIN to point to vip.ve.atsign.zone. The production value is root.atsign.org.&lt;/p>
&lt;h3 id="to-authenticate-with-demo-qr-codes">To Authenticate with Demo QR Codes&lt;/h3>
&lt;p>You will need the PKAM and CRAM Key QR codes in order to properly authenticate your testable atsigns.&lt;/p>
&lt;p>You will find the group of these keys on our GitHub &lt;a href="https://github.com/atsign-foundation/at_demos/tree/trunk/at_demo_data/lib/assets">here&lt;/a>&lt;/p>
&lt;h2 id="where-should-i-go-next">Where should I go next?&lt;/h2>
&lt;p>Give your users next steps from the Overview. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://devstaging.atsign.wtf/docs/sample-apps/">Sample Apps&lt;/a>: See apps that show off the power of the @platform on your own machine!&lt;/li>
&lt;/ul></description></item><item><title>Docs: The @platform Glossary of Terms</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/glossary/</guid><description>
&lt;h4 id="platform-">@platform :&lt;/h4>
&lt;p>The @platform is an open development platform for developers who want to create applications that give people full control of their digital selves. The platform is based on the @protocol - a network protocol for the secure exchange of information only between known entities. It uses a unique identifier called an @sign that, combined with the @platform (which is based on the @protocol), allows people the freedom to share, withhold, or retract their information at will with minimal effort, and the developer no longer has to bear the cost and risk of storing and managing people’s personal data.&lt;/p>
&lt;h4 id="protocol-">@protocol :&lt;/h4>
&lt;p>The @protocol is the underlying network protocol used by the @platform.The @protocol&amp;rsquo;s objective is to provide end-to-end encrypted data transfer between two known @signs, but also provides access to publicly available data that is cryptographically signed by the creating @sign.&lt;/p>
&lt;h4 id="sign">@sign&lt;/h4>
&lt;p>Each participant in the @protocol has a unique identifier known as an @sign. @sign’s are centrally registered and the rest of the infrastructure is fully distributed.Every @sign has a unique secondary server microservice that is accessible on the Internet via a unique Fully Qualified Domain Name (FQDN) and TCP/IP port number and Secure Sockets Layer (SSL) certificate.&lt;/p>
&lt;h4 id="root-server-">root server :&lt;/h4>
&lt;p>The root servers are the only centralized part of the @protocol and are centralized to provide a single namespace and a globally dependable platform. No data beyond the @sign and responding authoritative secondary server is held on the root servers. This information is considered public, and no authentication is required to look up the secondary server for a particular @sign.&lt;/p>
&lt;h4 id="secondary-server-">secondary server :&lt;/h4>
&lt;p>Secondary servers provide the second tier of the @protocol architecture, and are responsible for answering lookups for specific @signs. Secondary servers are generally deployed as microservices running on orchestrators such as Docker Swarm or Kubernetes, but can also run as standalone executables. Secondary servers have to be uniquely Internet addressable through use of an FQDN &amp;amp; Port pair that can be translated via DNS to a unique IP &amp;amp; Port.&lt;/p>
&lt;!-->
&lt;h5 id="cram-challenge-response-authentication-mechanism-key">CRAM (Challenge-Response Authentication Mechanism) key&lt;/h5>
&lt;h5 id="pkam-public-key-authentication-method-logic">PKAM (Public Key Authentication Method) logic&lt;/h5>
&lt;h5 id="protocol-verbsmethods">@protocol verbs/methods&lt;/h5>
&lt;h5 id="atkey">AtKey&lt;/h5>
&lt;h5 id="virtual-environment">virtual environment&lt;/h5>
&lt;h5 id="at_hello_world">at_hello_world&lt;/h5>
&lt;h5 id="at_chats-application">at_chats (application)&lt;/h5>
&lt;h5 id="at_cookbook-application">at_cookbook (application)&lt;/h5>
&lt;h5 id="mosphere">@mosphere&lt;/h5>
&lt;h5 id="server_demo_service">server_demo_service&lt;/h5>
&lt;h5 id="clientsdk">clientSDK&lt;/h5></description></item><item><title>Docs: Libraries</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/libraries/</guid><description>
&lt;h3 id="at_persistence_spec">at_persistence_spec&lt;/h3>
&lt;p>A Dart library containing abstract classes that defines what an implementation of the persistence layer is responsible for. This can be used to guide implementation of other persistence solutions for servers or SDKs as desired.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_persistence_spec">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_commons">at_commons&lt;/h3>
&lt;p>A library of Dart and Flutter utility classes that are used across other components of the @‎platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_commons">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_common_flutter">at_common_flutter&lt;/h3>
&lt;p>A Flutter package to provide common widgets used by other @‎platform Flutter packages.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_common_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_client">at_client&lt;/h3>
&lt;p>The at_client library is the non-platform specific Client SDK which provides the essential methods for building an app using the @protocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_client">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_lookup">at_lookup&lt;/h3>
&lt;p>A Dart library that contains the core commands that can be used with a secondary server (scan, update, lookup, llookup, plookup, etc.)&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_lookup">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_persistence_secondary_server">at_persistence_secondary_server&lt;/h3>
&lt;p>A Dart library with the implementation classes for the persistence layer of the secondary server.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_persistence_secondary_server">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_server_status">at_server_status&lt;/h3>
&lt;p>A Dart library that provides a means to check on the status of the @‎root server as well as the secondary server for any particular @‎sign.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_server_status">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_utils">at_utils&lt;/h3>
&lt;p>A Dart library that contains various utility classes such as atSign, atmetadata, configuration, and logger.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_utils">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_backupkey_flutter">at_backupkey_flutter&lt;/h3>
&lt;p>A Flutter plugin project for saving the backup key of any @‎sign that is being onboarded with @‎platform apps. The backup key can be used to authenticate in other @‎platform apps.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_backupkey_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_onboarding_flutter">at_onboarding_flutter&lt;/h3>
&lt;p>A Flutter plugin project for onboarding any @‎sign in @‎platform apps with ease. Provides a QRscanner option and an upload key file option to authenticate.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_onboarding_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_client_mobile">at_client_mobile&lt;/h3>
&lt;p>A Flutter extension to the at_client library which adds support for mobile, desktop and IoT devices.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_client_mobile">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_flutter">at_contacts_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide ease of managing contacts for an @‎sign using @p‎latform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_chat_flutter">at_chat_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide a chat feature between @‎signs built on the @‎platform to any Flutter application.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_chat_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_demo_data">at_demo_data&lt;/h3>
&lt;p>A Dart library that contains test data, testable @‎sign credentials and demo environment variables that can be used for writing demo apps and testing with the local test environment.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_demo_data">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_group_flutter">at_contacts_group_flutter&lt;/h3>
&lt;p>A Flutter plugin project to provide group functionality with contacts using @‎platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_group_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_location_flutter">at_location_flutter&lt;/h3>
&lt;p>A Flutter plugin project to share locations between two @‎signs and track them on OSM (OpenStreetMap).&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_location_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_utf7">at_utf7&lt;/h3>
&lt;p>Provides methods to encode/decode strings to/from the utf7 format as defined in rfc 2152&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_utf7">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contact">at_contact&lt;/h3>
&lt;p>A Dart library for managing contact data that developers can use for their applications.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contact">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_events_flutter">at_events_flutter&lt;/h3>
&lt;p>A Flutter plugin project to manage events (time, place and attendees) using the @‎platform.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_events_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_base2e15">at_base2e15&lt;/h3>
&lt;p>binary-to-text encoding schemes that represent binary data in an unicode string format, each unicode character represent 15 bits of binary data.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_base2e15">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_follows_flutter">at_follows_flutter&lt;/h3>
&lt;p>A Flutter plugin project that provides a basic social &amp;ldquo;follows&amp;rdquo; functionality for @signs. Provides a list of followers and following for @signs with the option to unfollow them.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_follows_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_server_spec">at_server_spec&lt;/h3>
&lt;p>A Dart library containing abstract classes that defines what implementations of the root and secondary servers are responsible for.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_server_spec">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_map">at_map&lt;/h3>
&lt;p>A new Flutter plugin.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_map">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: The @platform widgets</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/widgets/</guid><description>
&lt;!-- Onboarding Widget -->
&lt;h3 id="the-onboarding-widget">The Onboarding Widget&lt;/h3>
&lt;p>Onboarding for the first time with the @platform isn’t as simple as choosing your @sign from a dropdown menu and clicking “Login” (after all, how would the application know where to retrieve your authentication keys from a given @sign?).&lt;/p>
&lt;p>Implementing onboarding from scratch would be painstakingly difficult. Not only would you have to code the PKAM logic, but you would also have to build your own QR code scanner to extract the CRAM (Challenge-Response Authentication Mechanism) key from your @sign’s QR code generated on our website! Atsign realized this very quickly, so we developed the at_onboarding_flutter widget to help developers who want to build production-level apps that onboard real @signs (AKA @signs that you get from our .com site).&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the onboarding widget here!&lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_onboarding_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_onboarding_flutter: ^1.0.0+4
&lt;/code>&lt;/pre>&lt;p>The “Onboarding” widget is very handy in that you do not need to call the “onboard” or “authenticate” methods from the service file of the application to get it running. Instead, it will ask us to specify the following parameters (descriptions for each parameter are written in the comments):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Onboarding&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///Required field as for navigation.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">BuildContext&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///Onboards the given [atsign] if not null.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///If [atsign] is null then it takes the atsign from keychain.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///If [atsign] is empty then it directly jumps into authenticate
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///without performing onboarding. (or)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///If [atsign] is empty then it just presents pairAtSign screen
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///without onboarding the atsign. (or)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///Just provide an empty string for ignoring existing atsign in
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///keychain or app&amp;#39;s atsign.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///The atClientPreference [required] to continue with the onboarding.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///atClientPreference is an instance of a class in the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///at_client_mobile library that stores a number of important
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///attributes like the namespace of the application, the CRAM key of
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///an @sign, the root domain we want the project to communicate
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///with, and so on.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">AtClientPreference&lt;/span> &lt;span style="color:#000">atClientPreference&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///The root domain for our project. By default, the plugin connects
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///to [root.atsign.org] to perform onboarding.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///The color of the screen to match with the app&amp;#39;s aesthetics.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///default it is [black].
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Color&lt;/span> &lt;span style="color:#000">appColor&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///If logo is not null, then it displays the widget on the left side
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///of appbar. Else, it displays nothing.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Widget&lt;/span> &lt;span style="color:#000">logo&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///Function returns atClientServiceMap on successful onboarding along
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///with onboarded @sign. Assign these returned values to the relevant
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///variables in your project’s service file.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Map&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">AtClientService&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">onboard&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///Function returns error if onboarding fails for an @sign.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">Object&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">onError&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///After successful onboarding, the app will be redirected to this
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///screen if it is not null.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Widget&lt;/span> &lt;span style="color:#000">nextScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">///After the first successful onboarding, the app will get redirected
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///to this screen if not null.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">Widget&lt;/span> &lt;span style="color:#000">fistTimeAuthNextScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">AtSignLogger&lt;/span> &lt;span style="color:#000">_logger&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtSignLogger&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;At Onboarding Flutter&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">Onboarding&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#000">Key&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">onboard&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">onError&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">nextScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fistTimeAuthNextScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientPreference&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">appColor&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">domain&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see an actual implementation of the onboarding widget, let’s revisit the _login function in the at_hello_world app with some updated code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// Return an “Onboarding” widget that walks the individual through
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// the onboarding procedure for any real @sign.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">_login&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Onboarding&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">context:&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Ensure that the “root” attribute is assigned to
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// “root.atsign.org”
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">domain:&lt;/span> &lt;span style="color:#000">AtConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">root&lt;/span>
&lt;span style="color:#f57900">atClientPreference:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span>
&lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getAtClientPreference&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#f57900">appColor:&lt;/span> &lt;span style="color:#000">Color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fromARGB&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">255&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">240&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">94&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">62&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#f57900">onboard:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atClientServiceMap&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceMap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientServiceMap&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atsign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#f57900">onError:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">error&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Remove the constructor in HomeScreen. You can call the @sign
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// with the getAtSign() method in the service file.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">nextScreen:&lt;/span> &lt;span style="color:#000">HomeScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All of the parameters in the “Onboarding” widget can be populated very easily with either methods from the project’s service file (e.g. getAtClientPreference()) or special variables from the app itself (e.g. context). “Onboarding” is capable of handling all instances of an @sign (e.g. a particular @sign does not exist, a particular @sign exists but needs to be paired with a QR code to the device, a particular @sign exists and its keys are already in the device’s keychain manager). By using this widget, what would have taken several screens and many lines of code can be completely bypassed with a single return statement!&lt;/p>
&lt;p>That’s all for the “Onboarding” widget. Before moving on from this subsection, we highly recommend implementing the widget in your own application and onboarding a real @sign to understand its intended user journey. If you’re interested, these are the steps to implement the “Onboarding” widget in the at_hello_world project:&lt;/p>
&lt;p>Update your Android Studio, Flutter SDK, and Dart SDK to their latest versions. Place the at&lt;em>onboarding_flutter dependency in pubspec.yaml.
Follow the setup procedure for the “Onboarding” widget in the “AndroidManifest” (android -&amp;gt; app -&amp;gt; src -&amp;gt; main -&amp;gt; AndroidManifest.xml) and “gradle” file (android -&amp;gt; app -&amp;gt; build.gradle) of the at_hello_world project. You may also need to update the “classpath” of the android gradle build tool to 3.5.4 (this can be done by going to android -&amp;gt; gradle -&amp;gt; build.gradle and editing the first classpath in the “dependencies” brackets). This must be completed in order to set up the permission for the QR code scanner to access your camera. Find those steps on the pub.dev site for at_onboarding_flutter here.
Get a free @sign from atsign.com. Generate its QR code, and drag/drop the created file directly into the emulator. Confirm that the QR code image appears in the “Files” or “Drive” app of the emulator you’re using (assuming that it is an Android emulator).
In “at_conf.dart”, update the “root” variable from &amp;lsquo;vip.ve.atsign.zone&amp;rsquo; to &amp;lsquo;root.atsign.org&amp;rsquo;. This ensures that the project points to the domain that is used in production as opposed to the one for the virtual environment.
Replace the existing code in the _login() function with what we wrote above. Double-check that no errors arise (you’ll likely have to tweak the names of a couple of methods in the service file, because some of them begin with the “&lt;/em>” private designation).
Fire the app on your emulator. Although the dropdown menu will still appear (since we didn’t change any of that code), we will not be authenticating with any of the testable @signs. If you’d like, simply remove the “DropdownButton” widget so that we can eliminate the list of testable @signs. Click on the “Login” button.
Assuming that you haven’t previously authenticated with a real @sign, the “Onboarding” widget should prompt you with a request to upload your QR code. Upload the QR code you saved onto the emulator earlier and wait for the authentication to complete.
If no errors form, the “Onboarding” widget should take you seamlessly to the “Home” screen, where you can add &amp;amp; retrieve key/value pairs directly from your very own secondary server! The next time you authenticate (i.e. restart the application), the “Onboarding” widget should detect the authentication keys placed in your device’s keychain manager and guide you directly to the “Home” screen.&lt;/p>
&lt;/details>
&lt;!-- Onboarding Widget Ends-->
&lt;!-- Chats Widget-->
&lt;h3 id="the-chatting-widget">The Chatting Widget&lt;/h3>
&lt;p>One of the many things you can do after successfully authenticating an @sign is providing one-to-one text messaging! To do this, you’ll need the at_chat_flutter widget.&lt;/p>
&lt;p>The at_chat_flutter widget offers a messaging experience that is unique to the @platform. In a traditional messaging application, your texts are stored in a remote database and the person you’re pinging pulls the texts from there (a bit unsettling if you think about it). Of course, there is no such thing as a remote database in the @platform, so we had to be a bit clever coming up with a messaging scheme. In a nutshell, your text messages are not “sent” but rather “shared” with another @sign. All your texts are stored securely in your secondary server and never leave; if you decide to send a message to someone, that person is given permission to view that text via the notify verb, which will be covered in the next section on advanced @platform verbs.&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the chatting widget here! &lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_chat_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library-1">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_chat_flutter: ^1.0.1
&lt;/code>&lt;/pre>&lt;p>Although this messaging dynamic might sound a bit involved, set up is quite easy! To get a feel for using the “Chatting” widget, it’s best to follow along with the at_chats demo application.&lt;/p>
&lt;p>The general flow of all @platform widgets is onboarding an @sign =&amp;gt; initializing the service object =&amp;gt; creating the actual widgets. Assuming we’ve already onboarded an @sign, let’s look at the steps to initialize our chat service:&lt;/p>
&lt;p>(The following code snippets are taken directly from at_chats. While there will be explanations, don’t worry too much about all the variables!)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">getAtSignAndInitializeChat&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// In the at_chats app, the onboarded @sign is displayed at the top
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// of the Second Screen. We set that @sign to [currentAtSign].
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">currentAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Set [activeAtSign], which is the variable that gets displayed, to
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// [currentAtSign] using setState(() {}).
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">activeAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">currentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Initialize a List of Strings called [allAtSigns] that we will
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// eventually display in the dropdown on the Second Screen. Here, we
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// simply pull an existing List from the at_demo_data dependency.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">at_demo_data&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">allAtsigns&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// We want to remove the [activeAtSign] from this List because we
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// can&amp;#39;t chat with ourselves!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Again, call setState(() {}) to assign [allAtSigns] to the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// variable [atSigns] that will be used in the dropdown widget.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setState&lt;/span>&lt;span style="color:#000;font-weight:bold">(()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">atSigns&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">allAtSigns&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// This is the only at_chat_flutter related function!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// initializeChatService takes in an AtClientImpl instance, the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// currently onboarded @sign, and the root domain for this project.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// As its name suggest, this function will prepare the chat service
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// for us.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">initializeChatService&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">rootDomain:&lt;/span> &lt;span style="color:#000">MixedConstants&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ROOT_DOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">Because&lt;/span> &lt;span style="color:#000">getAtSignandInitializeChat&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#000">an&lt;/span> &lt;span style="color:#000">initialization&lt;/span> &lt;span style="color:#000">function&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">it&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#000">best&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">call&lt;/span> &lt;span style="color:#000">it&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">initState&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">function&lt;/span> &lt;span style="color:#000">at&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">top&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#000">_SecondScreenState&lt;/span> &lt;span style="color:#000">class&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span> &lt;span style="color:#000">The&lt;/span> &lt;span style="color:#000">only&lt;/span> &lt;span style="color:#000">other&lt;/span> &lt;span style="color:#000">thing&lt;/span> &lt;span style="color:#000">we&lt;/span> &lt;span style="color:#000">need&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> &lt;span style="color:#000">before&lt;/span> &lt;span style="color:#000">calling&lt;/span> &lt;span style="color:#000">the&lt;/span> &lt;span style="color:#a40000">“&lt;/span>&lt;span style="color:#000">Chatting&lt;/span>&lt;span style="color:#a40000">”&lt;/span> &lt;span style="color:#000">widget&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#000">deciding&lt;/span> &lt;span style="color:#000">who&lt;/span> &lt;span style="color:#000">we&lt;/span>&lt;span style="color:#a40000">’&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#000">like&lt;/span> &lt;span style="color:#000">to&lt;/span> &lt;span style="color:#000">chat&lt;/span> &lt;span style="color:#204a87;font-weight:bold">with&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>
&lt;span style="color:#000">setAtsignToChatWith&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// This function is as simple as calling the setChatWithAtSign()
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// function from the at_chat_flutter dependency with
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// [chatWithAtSign] passed in! [chatWithAtSign] is simply the @sign
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// that a user selects from the dropdown on the screen.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">setChatWithAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">chatWithAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We won’t want to call setAtsignToChatWith() in initState() because the function won’t know which @sign we’re communicating with until the individual selects it from the dropdown widget. Instead, it makes the most sense to place this function in the button (FlatButton for the at_chats app) that determines the navigation to the next screen. For at_chats, clicking the “Chat options” FlatButton will check to make sure that the “chatWithAtSign” variable is populated before it calls setAtsignToChatWith() and switches the “showOptions” variable to true, which allows the individual to see the two options for viewing the chatbox.&lt;/p>
&lt;p>Now, for the moment of truth: once we’ve initialized the chat service, how do we create the actual chat screen? In most tutorials, you’ll probably be guided through a UI-heavy demo of different chatbox components and pairing a backend service. With the @platform, however, it’s really just one line of code:&lt;/p>
&lt;p>(This snippet is directly from third_screen.dart in the at_chats project!)&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">_ThirdScreenState&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">State&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">ThirdScreen&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">override&lt;/span>
&lt;span style="color:#000">Widget&lt;/span> &lt;span style="color:#000">build&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BuildContext&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Scaffold&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">appBar:&lt;/span> &lt;span style="color:#000">AppBar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">title:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Chat&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)),&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// You can simply set the body parameter of Scaffold widget
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// to the ChatScreen widget from the at_chat_flutter dependency!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">body:&lt;/span> &lt;span style="color:#000">ChatScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Optional parameters to customize your ChatScreen widget.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// You can find the full list of parameters in our Github
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// under the at_widgets repository.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#f57900">height:&lt;/span> &lt;span style="color:#000">MediaQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">of&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">incomingMessageColor:&lt;/span> &lt;span style="color:#000">Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">blue&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#f57900">outgoingMessageColor:&lt;/span> &lt;span style="color:#000">Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">green&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#f57900">isScreen:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>By initializing the chat service and calling the ChatScreen() widget, you can make a fully-functioning one-to-one messaging application! While the ChatScreen widget offers a number of ways to customize your chatbox, if you’d like to build your own widget from scratch, you can use the at_chat_flutter dependency as a basis for creating your personal chat library that works with the @platform.&lt;/p>
&lt;/details>
&lt;!-- Chats Widget Ends-->
&lt;!-- Contacts Widget-->
&lt;h3 id="the-contacts-widget">The Contacts Widget&lt;/h3>
&lt;p>Too many @signs to keep track of? That’s no problem with the at_contacts_flutter widget! Simply add the at_contacts_flutter dependency to your project, and you’ll be capable of performing several actions with your @sign contacts.&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the contacts widget here! &lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_contacts_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library-2">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_contacts_flutter: ^1.0.0
&lt;/code>&lt;/pre>&lt;p>In order to implement the at_contacts_flutter widget, you must first, of course, create an AtClientService instance and authenticate an @sign.&lt;/p>
&lt;p>After you have successfully onboarded an @sign, you can add a page where you may choose to show your contacts or show your blocked contacts. On load of this page, you will want to initialize the contacts service, similar to initializing the at_chats service. The contacts service needs to be initialised with the atClient from the AtClientService, current @sign, and the root domain.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">initializeContactsService&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">rootDomain:&lt;/span> &lt;span style="color:#000">MixedConstants&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ROOT_DOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After successfully initializing the contact service, you will now be capable of getting the list of contacts that exist for the authenticated @sign. This is as easy as simply passing the contacts into a variable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_contactService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fetchContacts&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This fetchContacts() function exists in the _contactService file, which can be found within the at_contact’s ‘services’ folder. If you want to do more than just get the list of contacts, you have the capability of adding more contacts to this list, in addition to removing or blocking any.
In order to retrieve the list of blocked contacts, it is similar to retrieving the regular list of contacts. The code from the example app demonstrates this well.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">Class&lt;/span> &lt;span style="color:#000">BlockedScreen&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">StatefulWidget&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">override&lt;/span>
&lt;span style="color:#000">_BlockedScreenState&lt;/span> &lt;span style="color:#000">createState&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">_BlockedScreenState&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">_BlockedScreenState&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">State&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">BlockedScreen&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Here, we are initializing a ContactService object in order
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// to call our list of blocked contacts later within our widget.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Refer to how the list is populated within the example app
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ContactService&lt;/span> &lt;span style="color:#000">_contactService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">override&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">initState&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_contactService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ContactService&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">_contactService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fetchBlockContactList&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">super&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">initState&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To block a contact, it is as easy as calling the blockUnblock method. If a contact is blocked, it will unblock the contact. If the contact is not blocked, it will block it for you.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_contactService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">blockUnblockContact&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">contact:&lt;/span> &lt;span style="color:#000">_atSign_you_wish_toBlockUnblock&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After you block a contact, you may wish to have that contact removed from the list. All you have to do is simply implement the code below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_contactService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">deleteAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">atSign:&lt;/span> &lt;span style="color:#000">_atSign_you_wish_toRemove&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Along with the previously stated functionalities, the at_contacts_flutter package also provides the UI so there’s no need to set up a separate page to house these functions!&lt;/p>
&lt;/details>
&lt;h3 id="the-location-widget">The Location Widget&lt;/h3>
&lt;p>One of the more common mobile application features is geolocation. Even if your app doesn’t explicitly use a map, with an individual’s permission, you can use their location for a variety of relevant recommendations like shops, restaurants, and nearby events. The at_location_flutter dependency is a powerful abstraction for geolocation with the @platform, and we’ll see some use cases of its most common functions.&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the contacts widget here! &lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_location_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library-3">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_location_flutter: ^1.0.3
&lt;/code>&lt;/pre>&lt;p>Once we’ve successfully onboarded an @sign, let’s initialize our location service. For this subsection, we’ll base our code off of the example app in the Github directory for at_location_flutter.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">initService&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// A different way to call the currently onboarded @sign. In
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// practice, it is better to write a getAtSign() method in your
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// project&amp;#39;s service file. This variable is used to display the
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// onboarded @sign at the top of the screen.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">activeAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">currentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// initializeLocationService() is a function from
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// at_location_flutter that&amp;#39;s located in init_location_service.dart.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// This function takes in an AtClientImpl instance, the currently
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// onboarded @sign, a GlobalKey to access the NavigatorState (for
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// navigating between routes), and the domain we want to point our
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// project to.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">initializeLocationService&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">activeAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">NavService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">navKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">rootDomain:&lt;/span> &lt;span style="color:#000">MixedConstants&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ROOT_DOMAIN&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As is the case with most @platform widgets, you can call this initialization function in the initState() function of your class.&lt;/p>
&lt;p>Once our location service is ready to go, you can let the authenticated individual freely send and request locations to/from other @sign customers. These capabilities are made possible with the “sendShareLocationNotification” and “send RequestLocationNotification” functions (which exist in the init_location_service.dart file).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">ElevatedButton&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">onPressed:&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// checkAtsign() is a helper functions that ensures the entered
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// @sign (for sending/requesting a location) is valid. It is
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// unique to the example app in the at_location_flutter Github
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// directory.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">checkAtsign&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">CustomToast&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@sign not valid&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// This function takes in the @sign receiving the location
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// notification as well as the duration (in minutes) of
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// how long this shared location persists on the receiving
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// @sign&amp;#39;s secondary server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">sendShareLocationNotification&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#f57900">child:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Send Location&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">ElevatedButton&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">onPressed:&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">checkAtsign&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">CustomToast&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">show&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;@sign not valid&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Similar to the previous function,
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// &amp;#34;sendRequestLocationNotification&amp;#34; needs the @sign to
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// request a location from.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">sendRequestLocationNotification&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">receiver&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#f57900">child:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Request Location&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>While the above two functions are certainly useful, there is another widget in the at_location_flutter dependency that offers a more elegant UI for sending your location, requesting locations, and even visualizing your current position. That widget is called “HomeScreen”.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// When an individual clicks on the ElevatedButton that says “Show
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// map”, the Navigator will lead them to the HomeScreen().
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">ElevatedButton&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">onPressed:&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Navigator&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">of&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">MaterialPageRoute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">builder:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BuildContext&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">HomeScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#f57900">child:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Show map&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The HomeScreen displays a map with your location and offers two options (contained in “Task” widgets) that provide more user-friendly versions of the “sendShareLocationNotification” and “send RequestLocationNotification” functions (if you’re curious, these more elegant widgets are called ShareLocationSheet() and RequestLocationSheet() respectively). When you click on one of these tasks, a popup will appear to enter a receiving @sign (and duration for sharing a location), and any task you complete will appear in the bottom white region of the screen with its current status.&lt;/p>
&lt;p>That’s all for the “Location” widget! If you want to test the at_location_flutter dependency for yourself, feel free to start by cloning the example app from the at_location_flutter Github repository. For more intricate functions like the location notification stream, our Github would be an excellent place to learn more.&lt;/p>
&lt;/details>
&lt;!-- End Location Widget-->
&lt;!-- Events Widget-->
&lt;h3 id="the-events-widget">The Events Widget&lt;/h3>
&lt;p>Like how we regularly share calendar items between our friends, family, and colleagues, it would be very convenient to have a data structure for events that works with the @platform. This is where the at_events_flutter dependency comes into play.&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the events widget here! &lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_events_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library-4">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_events_flutter: ^1.0.0
&lt;/code>&lt;/pre>&lt;p>The first step, as you very well may have guessed, is the initialization of the event service. Like the previous few widgets discussed above, we’ll be examining snippets from the &lt;a href="https://github.com/atsign-foundation/at_widgets/tree/trunk/at_events_flutter/example">example app&lt;/a> in the at_event_flutter Github directory throughout this subsection.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">initService&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">activeAtSign&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>
&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">currentAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Unlike most of the initialization functions, our event
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// initializer only needs an AtClientImpl instance and an optional
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// argument for the root domain.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">initialiseEventService&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">clientSdkService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClientServiceInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">atClient&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">rootDomain:&lt;/span> &lt;span style="color:#000">MixedConstants&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ROOT_DOMAIN&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The most important function in the at_event_flutter library is CreateEvent(), which builds an instance of a CreateEvent that can be customized and shared across different @signs:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">TextButton&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">onPressed:&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// bottomSheet will return a pop up screen that takes up 90%
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// of the screen height.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">bottomSheet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">CreateEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">MediaQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">of&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">height&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.9&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#f57900">child:&lt;/span> &lt;span style="color:#000">Container&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">height:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">40&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">child:&lt;/span>
&lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Create event&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#f57900">style:&lt;/span> &lt;span style="color:#000">TextStyle&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">color:&lt;/span> &lt;span style="color:#000">Colors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">black&lt;/span>&lt;span style="color:#000;font-weight:bold">)),&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CreateEvent() is a separate screen in the application that guides an individual through a list of fields they can populate to provide information about their event. If you look into the CreateEvent class, you’ll see that these fields are stored in an object called “eventData”, which is an instance of an &lt;a href="https://github.com/atsign-foundation/at_widgets/blob/trunk/at_events_flutter/lib/models/event_notification.dart">EventNotificationModel&lt;/a>. It’s full list of attributes is below (the ones with comments are used in the CreateEvent class):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">EventNotificationModel&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">EventNotificationModel&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">atsignCreator&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">isCancelled&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// The title of the event.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// A location serving as the event&amp;#39;s venue.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Venue&lt;/span> &lt;span style="color:#000">venue&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// An object that stores info like event date, start time, and repeat duration.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Event&lt;/span> &lt;span style="color:#000">event&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">AtGroup&lt;/span> &lt;span style="color:#000">group&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">isSharing&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">isUpdate&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//when an event data is being updated , this should be true.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>“eventData” is a crucial data structure that’s used not just in creating an event but updating and deleting events as well. The init_events_service.dart file illustrates a variety of functions that can be used to perform useful actions on these objects.&lt;/p>
&lt;p>One important feature of the example app is its EventList class, which doesn’t come directly with the at_events_flutter dependency:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">TextButton&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">onPressed:&lt;/span> &lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Navigator&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">push&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">MaterialPageRoute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#f57900">builder:&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">EventList&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This seemingly harmless class is actually doing quite a bit of work behind the scenes! EventList listens to an event stream that comes from an EventService object (a class within the at_event_flutter dependency) and displays them in a ListView format. Clicking on one of these events, you’ll be navigated to a popup of a CreateEvent instance with its “isUpdate” parameter set to true. This allows you to edit and save any event of your choice!&lt;/p>
&lt;/details>
&lt;h3 id="the-backup-keys-widget">The Backup Keys Widget&lt;/h3>
&lt;p>When someone uses their @sign for the first time with an @platform app, it is important to have them authenticate with their generated QR code and create a set of backup keys just in case the ones in the keychain manager are lost or if you want to use the same @sign on a different device. The backup keys widget occurs during the “Onboarding” widget.&lt;/p>
&lt;details>
&lt;summary style="color: #F05F3E"> Learn more about the events widget here! &lt;/summary>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This dependency value may not be up-to-date so be sure to check it out on our &lt;a href="https://pub.dev/packages/at_backupkey_flutter">pub.dev&lt;/a>!
&lt;/div>
&lt;h4 id="use-this-package-as-a-library-5">Use this package as a library&lt;/h4>
&lt;pre>&lt;code>at_onboarding_flutter: ^1.0.0+4
&lt;/code>&lt;/pre>&lt;p>You may notice that in order to get the at_backupKeys_flutter package, you can simply pull from the at_onboarding_flutter widget which houses the at_backupkeys_flutter widget! See below the process of at_onboarding_flutter to see where at_backupkeys_flutter comes into play!&lt;/p>
&lt;div class="row">
&lt;div class="column" style="float: left;
width: 33.33%; padding-left: 50px">
&lt;img src="https://devstaging.atsign.wtf/Widgets/enterAtsign.png" alt="at_cookbook"style="width:89%;">
&lt;/div>
&lt;div class="column" style="float: left;
width: 33.33%; padding-left: 25px">
&lt;img src="https://devstaging.atsign.wtf/Widgets/qrCodeUpload.png" alt="at_cookbook" style="width:82%;">
&lt;/div>
&lt;div class="column"style="float: left;
width: 33.33%;">
&lt;img src="https://devstaging.atsign.wtf/Widgets/backupKeys_save.png" alt="at_cookbook"style="width:75%;">
&lt;/div>
&lt;/div>
&lt;p>After inputting what @sign you wish to pair, you will need to upload the QR code retrieved from atsign.com. The emulator in the picture is not hooked up to a camera, so a small GIF of a house is there to fill where the camera would be. After successfully uploading and authenticating with the QR code, the backup key widget will be introduced to you! From the save option, you will be prompted to either save your keys to the files folder of the device or upload the keys to an associated Google Drive.&lt;/p>
&lt;p>Fortunately, implementing the backup key widget is painless as it is a part of the onboarding widget! If you have already implemented the onboarding widget, there’s no code you need to write!&lt;/p>
&lt;/details>
&lt;h3 id="at_onboarding_flutter">at_onboarding_flutter&lt;/h3>
&lt;p>A flutter plugin project for onboarding any @sign in @protocol apps with ease. Provides QRscanner and upload key file option to authenticate.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_onboarding_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_chat_flutter">at_chat_flutter&lt;/h3>
&lt;p>A flutter plugin project to provide chat feature using atsigns and atprotocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_chat_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_common_flutter">at_common_flutter&lt;/h3>
&lt;p>A flutter package to provide common widgets used by other atsign flutter packages.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_common_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_backupkey_flutter">at_backupkey_flutter&lt;/h3>
&lt;p>A flutter plugin project for saving backup key of any @sign that is being onboarded with @protocol apps. Backup key can used to authenticate in any @protocol apps.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_backupkey_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_flutter">at_contacts_flutter&lt;/h3>
&lt;p>A flutter plugin project to provide ease of managing contacts for an atsign using atprotocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_contacts_group_flutter">at_contacts_group_flutter&lt;/h3>
&lt;p>A flutter plugin project to provide the group functionality with contacts using atprotocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_contacts_group_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_location_flutter">at_location_flutter&lt;/h3>
&lt;p>A flutter plugin project to share location between two atsigns and track them on OSM (open street maps).&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_location_flutter">Learn more&lt;/a>&lt;/p>
&lt;h3 id="at_events_flutter">at_events_flutter&lt;/h3>
&lt;p>A flutter plugin project to manage events using the atprotocol.&lt;/p>
&lt;p>&lt;a href="https://pub.dev/packages/at_events_flutter">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: Tutorial Videos on the @ platform</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/tutorialvideos/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/tutorialvideos/</guid><description>
&lt;style>
/* Create two equal columns that floats next to each other */
.column {
float: left;
width: 50%;
padding: 10px;
height: 300px; /* Should be removed. Only for demonstration */
}
/* Clear floats after the columns */
.row:after {
content: "";
display: table;
clear: both;
}
&lt;/style>
&lt;div class="row">
&lt;div class="column">
&lt;div id="CenterPNG">
&lt;h4>Using Flutter create to build a secure app on the @platform - Runtime Ep.2&lt;/h4>
&lt;center>
&lt;iframe width="280" height="158" src="https://www.youtube.com/embed/6UMpnONLpHA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/center>
&lt;/div>
&lt;/div>
&lt;div class="column">
&lt;div id="CenterPNG">
&lt;h4>Easy Flutter App Onboarding/Login System on the @platform - Runtime Ep.1 &lt;/h4>
&lt;center>
&lt;iframe width="280" height="158" src="https://www.youtube.com/embed/SiYZ8FBJUKI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/center>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="row">
&lt;div class="column">
&lt;div id="CenterPNG">
&lt;h4>Secure Flutter object storage/sharing on the @platform - Runtime Ep.3 &lt;/h4>
&lt;center>
&lt;iframe width="280" height="158" src="https://www.youtube.com/embed/jZ7oTnPZVxc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/center>
&lt;/div>
&lt;/div>
&lt;div class="column">
&lt;div id="CenterPNG">
&lt;h4>Retrieve secure Flutter objects on the @platform - Runtime Ep.4&lt;/h4>
&lt;center>
&lt;iframe width="280" height="158" src="https://www.youtube.com/embed/pEa9SIh-8Vw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/center>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h5> Subscribe to Atsign's YouTube channel to be notified whenever a new video has been published! &lt;/h5>
&lt;h5>Subscribe &lt;a href="https://www.youtube.com/channel/UCzjSJbPmIEDXFbHb2RIj9Gg">here!&lt;/a>&lt;/h5></description></item><item><title>Docs: What's new with rSDK?</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/enhancements/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/enhancements/</guid><description>
&lt;h2 id="network-availability-callback-service">Network availability callback service.&lt;/h2>
&lt;p>Apps can subscribe to the network availability callback service to know when
the network goes off and on. Some of the services offered by SDK is
subscribing to this service internally.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#000">ConnectivityListener&lt;/span> &lt;span style="color:#000">connectivityListener&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ConnectivityListener&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000">connectivityListener&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">listen&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">isConnected&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isConnected&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;connected&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;disconnected&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// call this when app is closed or you no longer need the subscription
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">connectivityListener&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">unSubscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="response-objects">Response objects.&lt;/h2>
&lt;p>Notification Response Object.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">AtNotification&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">late&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">late&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">late&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">from&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">late&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">to&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">late&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">epochMillis&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">operation&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sync Response Object&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SyncResult&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SyncStatus&lt;/span> &lt;span style="color:#000">syncStatus&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">SyncStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">not_started&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">AtClientException&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">atClientException&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">DateTime&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">lastSyncedOn&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">dataChange&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">enum&lt;/span> &lt;span style="color:#000">SyncStatus&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">not_started&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">success&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">failure&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: at_cookbook</title><link>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_cookbook/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/at_cookbook/</guid><description>
&lt;p align="center">
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/at_cookbook_demo.gif" alt="at_cookbook" height= "520px" width= "300px"/>
&lt;/p>
&lt;!-- IMPORTANT NOTE: Current episode of Tyler Time at_cookbook walkthrough not uploaded -->
&lt;div style= "background-color:#F05F3E;color:white; min-height:100px;width:200px;position:relative; float:right;padding:10px;margin-bottom:20px;margin-left: 20px;">
&lt;h3> tl;dr &lt;/h3>
Overview too long for you? Watch the &lt;u>
&lt;a href="https://www.youtube.com/watch?v=Yj8KekimmpM" style="color: white;">Tyler Time&lt;/a>&lt;/u> episode that covers this instead!
&lt;/div>
&lt;h2 id="overview-of-the-at_cookbook-app">Overview of the at_cookbook app&lt;/h2>
&lt;p>The at_cookbook app allows a testable @sign to create a recipe with a name, description, list of ingredients, and a picture. After doing this, the @sign is capable of sharing this entire recipe with another testable @sign. A dishWidget class is created which encapsulates an individual recipe with each instance. Its parameters are defined below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DishWidget&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">StatelessWiatdget&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">ingredients&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">description&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">imageURL&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">final&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">prevScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">DishWidget&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ingredients&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">description&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">imageURL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#a40000">@&lt;/span>&lt;span style="color:#000">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prevScreen&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After we pull dishWidgets that exist in a secondary server, we display them on the home screen, where the list of recipes are located.&lt;/p>
&lt;p>Now that you have the recipe itself, you’re able to pass this through the notify verb. When an @sign wishes to share a recipe, the _share function will be called. This function is structured as so:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#000">_share&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BuildContext&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">sharedWith&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">async&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">null&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">lookup&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">widget&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dishWidget&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">value&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">metadata&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">()..&lt;/span>&lt;span style="color:#000">ttr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000">AtKey&lt;/span> &lt;span style="color:#000">atKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtKey&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">widget&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dishWidget&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">title&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">metadata&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">metadata&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedBy&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atSign&lt;/span>
&lt;span style="color:#000;font-weight:bold">..&lt;/span>&lt;span style="color:#000">sharedWith&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">_otherAtSign&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">operation&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">OperationEnum&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">update&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">await&lt;/span> &lt;span style="color:#000">_serverDemoService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">operation&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000">Navigator&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we’re initializing a variable called lookup as an AtKey object (lookup will be our recipe). You’ll notice that we’re defining a couple of the attributes of the AtKey object (mainly the name of the recipe and what @sign is this recipe being shared with).&lt;/p>
&lt;p>We would like to “get” the values of our recipe, so we use the get verb from the serverDemoService file of the application. ttr (Time To Refresh), a metadata attribute, is called with a value of -1, which means that we’re confident that the values of our recipe won’t change. Once the recipe has been cached on the secondary server that has received the recipe, it will not need to worry about updating its values at any point.&lt;/p>
&lt;p>After passing all of the necessary values such as the metadata, the appropriate @signs, and the type of notification we’d like to send, we simply pass the values through the notify verb!&lt;/p></description></item><item><title>Docs: The @platform data privacy &amp; permissions guide</title><link>https://devstaging.atsign.wtf/docs/archives/guides/data-privacy-and-permissions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/data-privacy-and-permissions/</guid><description>
&lt;h3 id="application-access-to-data">Application Access to Data&lt;/h3>
&lt;p>There are three basic types of application data access:&lt;/p>
&lt;ol>
&lt;li>Storing and retrieving data for your application&lt;/li>
&lt;li>Accessing data shared by others&lt;/li>
&lt;li>Accessing and reasoning over data stored by other applications&lt;/li>
&lt;/ol>
&lt;h4 id="storing-and-retrieving-data-for-your-application">Storing and retrieving data for your application&lt;/h4>
&lt;p>If your application needs to store data, you can use the @SDK to manage data securely and easily in the @persistence keystore. This SDK provides the following capabilities:&lt;/p>
&lt;ul>
&lt;li>Data is stored in an encrypted keystore locally for your application&lt;/li>
&lt;li>Data access is in-memory and super-fast&lt;/li>
&lt;li>Offline access with the device is supported&lt;/li>
&lt;li>Data is synchronized and backed up to a cloud @server automatically&lt;/li>
&lt;li>Data is synchronized across all the person’s devices automatically&lt;/li>
&lt;li>Privacy is hardcoded: The owner of the data controls all access to it&lt;/li>
&lt;/ul>
&lt;p>Note: the cloud @server does not have access to the secret private key. This prevents bad actors from accessing or modifying private data not meant for them.&lt;/p>
&lt;h5 id="creating-updating-and-deleting-data-with-your-application">Creating, updating and deleting data with your application&lt;/h5>
&lt;p>Data operations that involve writing data to the @persistence keystore can only be done with the approval of the owner. Access to this data is cryptographically controlled. This is managed for your application by the @SDK and is remarkably easy. The types of access that can be set for each data record include:&lt;/p>
&lt;ul>
&lt;li>public: data that can be read by anyone without need for authentication&lt;/li>
&lt;li>shared: data that the owner has explicitly granted the right to some entity to read it after proving they are who they claim to be&lt;/li>
&lt;li>private: data that is only accessible to the owner (requires authentication)&lt;/li>
&lt;li>hidden: publicly readable data that is not listed in a scan of the keystore.&lt;/li>
&lt;/ul>
&lt;p>Naturally, the owner of an @persistence keystore has access to any and all data that is contained therein. After being authorized, your application can read the data that it needs from the keystore as well. Applications that prefer to rely on data within its own namespace can also store read data from the @persistence keystore with approval of the owner. As always, all data stored is owned and controlled by the owner of the @persistence keystore.&lt;/p>
&lt;p>For more information on how your application can create, update, or delete data, see the &lt;a href="https://pub.dev/packages/at_persistence_spec">@Persistence Keystore Guide&lt;/a> and the &lt;a href="https://atsign.dev/docs/functional_architecture/verbs">@Protocol Verbs&lt;/a>.&lt;/p>
&lt;h4 id="accessing-data-shared-by-others">Accessing data shared by others&lt;/h4>
&lt;p>Applications typically are a combination of an owner&amp;rsquo;s data and data that has been shared with them by others. This is a new feature and is what we’re referring to when we talk about P2P (Peer-to-Peer) applications.&lt;/p>
&lt;p>For example, messaging applications available today involve a combination of data (messages) from various people but have no way to ensure that each individual message belongs to its creator. With the @protocol, messages that I create and share with other people are owned by me and likewise, messages that others create and share with me are owned by them. The messaging application is thus responsible for interleaving and presenting these messages while simultaneously maintaining privacy controls for the owner of the data (i.e. I own my messages to you and you own your messages to me).&lt;/p>
&lt;p>While this may seem confusing and difficult at first, the @Client SDK and the Flutter UI Component libraries make it very simple to implement. This results in surveillance-free, privacy-compliant applications that are simple, cost-effective, and efficient, with better performance than backend server-based applications of the past.&lt;/p>
&lt;p>The @Client SDK provides the following capabilities that help to integrate data shared by others in your application:&lt;/p>
&lt;ul>
&lt;li>Public data shared by others can be looked up&lt;/li>
&lt;li>The notification verb alerts your application when new data shared by others is available&lt;/li>
&lt;li>The monitor verb creates a persistent connection for real-time interactions&lt;/li>
&lt;li>Data can be scanned for and read directly from another persons @persistence keystore&lt;/li>
&lt;li>Shared data is cached for fast, reliable access to shared data with all privacy related parameters managed for you by the @Client SDK&lt;/li>
&lt;/ul>
&lt;p>For more information on how your application can create, update, or delete data, see the [@Persistence Keystore Guide](Persistence Keystore Guide) and the &lt;a href="https://atsign.dev/docs/functional_architecture/verbs">@Protocol Verbs&lt;/a>.&lt;/p>
&lt;h4 id="accessing-and-reasoning-over-data-stored-by-other-applications">Accessing and reasoning over data stored by other applications&lt;/h4>
&lt;p>One super interesting side effect of giving people control of their data and storing it all in one place is that any application that they authorize can reason over any data that they are allowed to access. Applications that are certified as @protocol compliant (@pps) can provide amazing new experiences because they have the ability to access and reason over all data stored in an @persistence keystore.&lt;/p>
&lt;p>For example, a certified messaging app may contain a thread where a group of people are discussing which movie to go see on Wednesday night. If permitted, this information can also be presented as an event in their certified calendar application and similarly presented as a group in their certified contacts application.&lt;/p>
&lt;h3 id="advanced-options">Advanced Options&lt;/h3>
&lt;h4 id="create-a-separate-persistence-keystore-for-your-application-certification-not-required">Create a separate @persistence keystore for your application (certification not required)&lt;/h4>
&lt;p>If you would like to store application data, you are free to use the @persistence keystore for your persistence if you want to. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.&lt;/p>
&lt;h4 id="authentication-only-without-the-persistence-keystore-certification-not-required">Authentication only, without the @persistence keystore (certification not required)&lt;/h4>
&lt;p>If your application does not require data persistence on behalf of the person using it; for example, if you just want to make sure that your application is licensed to the person using it, then you do not need to get it certified. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.&lt;/p>
&lt;p>For more information about getting your application certified, see the &lt;a href="https://atsign.dev/dev_tools/certification/">Certification page&lt;/a>.&lt;/p></description></item><item><title>Docs: The @protocol verbs</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/verbs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/verbs/</guid><description>
&lt;h3 id="from">from&lt;/h3>
&lt;p>The “from” verb is used to tell the secondary server what @sign you claim to be, and the secondary server will respond with a challenge. The challenge will be in the form of a full @ address and a cookie to place at that address. Before giving the challenge it will verify the client SSL certificate. The client SSL certificate has to match the FQDN list in the root server for that @sign in either the CN or SAN fields in the certificate.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/From-class.html">Learn More&lt;/a>&lt;/p>
&lt;h3 id="cram">cram&lt;/h3>
&lt;p>The cram verb is used to authenticate the @sign to the secondary server. On successful request, binds the @sign to the secondary server. The secret is appended to the challenge (response of from verb) and gives a SHA512 digest which serves as an input to the CRAM verb. On successful cram verb request, the @sign is successfully authenticated to the secondary server and allows user to Add/Update, Delete and lookup the keys in their respective secondary servers.
We use &amp;ldquo;cram&amp;rdquo; authentication for the first time and will create a public/private key pair for pkam authentication for subsequent logins.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Cram-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="pkam">pkam&lt;/h3>
&lt;p>The pkam( Public Key Authentication Mechanism) verb is used to authenticate the @sign to the secondary server. This is similar to how ssh authentication works. On successful request, binds the @sign to the secondary server.On successful pkam verb request, the @sign is successfully authenticated to the secondary server and allows user to Add/Update, Delete and lookup the keys in their respective secondary servers.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Pkam-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="scan">scan&lt;/h3>
&lt;p>The &amp;ldquo;scan&amp;rdquo; verb scans the available keys. The scan verb when used by unauthenticated @sign user, scans for keys that are publicly available to you.The scan when used by an authenticated user via the cram verb, scans all the available keys on the secondary server.
You can use scan verb with regex if you want to get keys matches with the regex.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Scan-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="lookup">lookup&lt;/h3>
&lt;p>The “lookup” verb allows the lookup of a particular address in the @ handles namespace. The “lookup” verb provides public lookups and specific key look ups when authenticated as a particular @ handle using the “from” and “pol” verbs. If a lookup is valid the resulting information is returned with the data: header and a carriage return and a further @ prompt ready for further commands. If the lookup is not valid then a null is returned again with the data: header.
The @sign should be authenticated using the cram verb prior to use the lookup verb.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Lookup-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="plookup">plookup&lt;/h3>
&lt;p>The &amp;ldquo;plookup&amp;rdquo; verb, provides a proxied public lookups for a resolver that perhaps is behind a firewall. This will allow a resolver to contact a @ server and have the @ server lookup both public @ handles information. This will be useful in large enterprise environments where they would want all lookups going through a single secondary server for the entity or where a single port needs to be opened through a firewall to lookup @ handles.
The @sign should be authenticated using cram verb prior to use the plookup verb.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/ProxyLookup-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="llookup">llookup&lt;/h3>
&lt;p>The &amp;ldquo;llookup&amp;rdquo; verb can be used to locally lookup keys stored on our secondary server. To perform local look up, the user should be successfully authenticated via the &amp;ldquo;cram&amp;rdquo; verb.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/LocalLookup-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="update">update&lt;/h3>
&lt;p>The &amp;ldquo;update&amp;rdquo; verb is used to create/update the keys in the secondary server. We can create/update both public and private keys. kThe update verb is used to set public responses and specific responses for a particular authenticated users after using the pol verb.
The @sign should be authenticated using cram verb prior to use the update verb.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Update-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="delete">delete&lt;/h3>
&lt;p>The &amp;ldquo;update&amp;rdquo; verb is used to delete the keys in the secondary server. A delete request must contain the distinguished name of the key to be deleted. The @sign should be authenticated using the cram/pkam verb prior to use the delete verb.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Delete-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="notify">notify&lt;/h3>
&lt;p>The “notify” verb used to notify a key to another atsign. The @sign should be authenticated using the cram/pkam verb prior to use the notify verb.
You can send a notification to multiple users using &amp;ldquo;notify:all&amp;rdquo; command. Also you can list out all the notifications using &amp;ldquo;notify:list&amp;rdquo;.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Notify-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="monitor">monitor&lt;/h3>
&lt;p>The “monitor:” verb is used to monitor either all or specific notification events that are sent using the “notify:” verb. Notifications are both queued and managed by the secondary server, and the status of an individual notification can also be seen.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Monitor-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="stats">stats&lt;/h3>
&lt;p>The &amp;ldquo;stats&amp;rdquo; verb used to get all the available metrics. We can get specific metrics by providing &amp;lsquo;,&amp;rsquo; separated list like stats:1,2. If we didn&amp;rsquo;t provide anything it will return all the metrics information.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Stats-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="sync">sync&lt;/h3>
&lt;p>The &amp;ldquo;sync&amp;rdquo; verb is used to fetch all the changes after a given commit sequence number from the commit log on the server. This verb is helpful when local and remote secondary servers are not in sync. We can sync only specific keys by providing regex pattern
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Sync-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="config">config&lt;/h3>
&lt;p>The &amp;ldquo;config&amp;rdquo; verb is used for configuring or viewing an @sign&amp;rsquo;s block/allow list. &amp;lsquo;from&amp;rsquo; verb functionality is dertermined by using the configurations of &amp;lsquo;config&amp;rsquo; verb. If an atsign is in block list, secondary server won&amp;rsquo;t allow it for authentication.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Config-class.html">Learn more&lt;/a>&lt;/p>
&lt;h3 id="pol">pol&lt;/h3>
&lt;p>The &amp;ldquo;pol&amp;rdquo; verb allows to switch as another @sign user. To switch as another user, use from:&amp;lt;@sign&amp;gt;(The another @sign user) verb which gives a response as proof:&lt;key>; then use pol verb. On successful authentication, the prompt changes to the another @sign user. If we authenticate to other atsign using pol, we can only access public information available.
&lt;a href="https://pub.dev/documentation/at_server_spec/latest/verbs/Pol-class.html">Learn more&lt;/a>&lt;/p></description></item><item><title>Docs: New to Flutter?</title><link>https://devstaging.atsign.wtf/docs/overview/newtoflutter/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/newtoflutter/</guid><description>
&lt;h2 id="0-what-is-flutter-and-why-did-we-choose-it-to-build-our-apps-on-the-platform">0. What is Flutter and why did we choose it to build our apps on the @platform?&lt;/h2>
&lt;p>&lt;a href="https://flutter.dev/">Flutter&lt;/a> is Google’s increasingly popular UI software framework. Flutter has taken the mobile app development ecosystem by storm over the last few years. The Flutter Developer Community is increasing multifold every day and we are proud to be a small part of it. As of Dec 2021, the Google Play Store has more than 375,000 apps built on Flutter.&lt;/p>
&lt;p>If you are new to Flutter, no problem! Many of our first developers knew nothing about these languages coming in. For guidance on Flutter installation and development, please visit &lt;a href="https://flutter.dev">flutter.dev&lt;/a>.&lt;/p>
&lt;h2 id="1-setting-up-flutter">1. Setting Up Flutter&lt;/h2>
&lt;p>First and foremost, in a Flutter environment you will need to install the Flutter SDK. The installation steps are dependent on your operating system. Follow along the &lt;a href="https://flutter.dev/docs/get-started/install">offical getting started guide&lt;/a> to complete your installation. When you install the Flutter SDK, it will also include the Dart SDK for you.&lt;/p>
&lt;h2 id="2-recommended-editors">2. Recommended Editors&lt;/h2>
&lt;p>We recommend using &lt;a href="https://www.jetbrains.com/idea/download/#section=windows">IntelliJ&lt;/a>, &lt;a href="https://developer.android.com/studio">Android Studio&lt;/a>, or &lt;a href="https://code.visualstudio.com/download">Visual Studio Code&lt;/a>. The offical Flutter guide also includes information to setup each of these options &lt;a href="https://flutter.dev/docs/get-started/editor">here&lt;/a>.&lt;/p>
&lt;h3 id="a-hrefhttpswwwjetbrainscomideaimg-srchttpsuploadwikimediaorgwikipediacommonsthumb99cintellij_idea_iconsvg64px-intellij_idea_iconsvgpng-altintellij-styleheight-15ema-intellij">&lt;a href="https://www.jetbrains.com/idea/">&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9c/IntelliJ_IDEA_Icon.svg/64px-IntelliJ_IDEA_Icon.svg.png" alt="IntelliJ" style="height: 1.5em;">&lt;/a> IntelliJ&lt;/h3>
&lt;p>IntelliJ is a commonly used IDE. If you have used it in the past, you can continue to use it for your Flutter projects.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Important Links for IntelliJ&lt;/p>
&lt;ul>
&lt;li>Download IntelliJ &lt;a href="https://www.jetbrains.com/idea/download/#section=windows">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="a-hrefhttpsdeveloperandroidcomstudioimg-srchttpsuploadwikimediaorgwikipediacommonsthumb992android_studio_trademarksvg256px-android_studio_trademarksvgpng-altandroid-studio-styleheight-15ema-android-studio">&lt;a href="https://developer.android.com/studio">&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Android_Studio_Trademark.svg/256px-Android_Studio_Trademark.svg.png" alt="Android Studio" style="height: 1.5em;">&lt;/a> Android Studio&lt;/h3>
&lt;p>Android Studio is an IDE built from IntelliJ specifically for Android development. If you are new to mobile development this a good IDE to start with, it is capable of installing all of your android tooling for you, and makes it easy to create emulators.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Important Links for Android Studio&lt;/p>
&lt;ul>
&lt;li>Download Android Studio &lt;a href="https://developer.android.com/studio">here&lt;/a>&lt;/li>
&lt;li>Read an article on how to set up an AVD &lt;a href="https://blog.atsign.dev/running-one-or-more-emulators-through-cli-using-android-studio-ckm2kuryy00v5mss16f1agh7m">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="a-hrefhttpscodevisualstudiocomimg-srchttpsuploadwikimediaorgwikipediacommonsthumb99avisual_studio_code_135_iconsvg150px-visual_studio_code_135_iconsvgpng-altvisual-studio-code-styleheight-15ema-visual-studio-code">&lt;a href="https://code.visualstudio.com/">&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Visual_Studio_Code_1.35_icon.svg/150px-Visual_Studio_Code_1.35_icon.svg.png" alt="Visual Studio Code" style="height: 1.5em;">&lt;/a> Visual Studio Code&lt;/h3>
&lt;p>Visual Studio Code, when compared to IntelliJ and Android Studio, is the most customizable with a seemingly endless number of programming languages to utilize. Developers commonly call this IDE ‘VS Code’ (who has time to say entire words anyway?). If you have watched our tutorials on atsign.dev, you’ll notice that VS Code is the other IDE of choice with our devs!&lt;/p>
&lt;p>Visual Studio Code, VSCode for short, is a customizable text editor. Due to its numerous plugins available, it can be used as an IDE for almost any language. It is the IDE of choice amongst most of our developers, and if you haven&amp;rsquo;t given it a try we recommend that you do!&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Important Links for Visual Studio Code&lt;/p>
&lt;ul>
&lt;li>Download Visual Studio Code &lt;a href="https://code.visualstudio.com/download">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="where-should-i-go-next">Where should I go next?&lt;/h2>
&lt;p>Follow &lt;a href="https://devstaging.atsign.wtf/docs/get-started/get-an-atsign/">this guide&lt;/a> to get an @sign.&lt;/p>
&lt;p>If you already have an @sign, follow &lt;a href="https://devstaging.atsign.wtf/docs/Get-Started/create-a-project">this guide&lt;/a> to create your first app.&lt;/p></description></item><item><title>Docs: Runtime Live</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/runtimelive/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/runtimelive/</guid><description>
&lt;style>
/* Create two equal columns that floats next to each other */
.column {
float: left;
width: 50%;
padding: 10px;
height: 300px; /* Should be removed. Only for demonstration */
}
/* Clear floats after the columns */
.row:after {
content: "";
display: table;
clear: both;
}
&lt;/style>
&lt;div class="row">
&lt;div class="column">
&lt;center>
&lt;h4>Build an End-to-End Encrypted Flutter Chat app on the @ platform&lt;/h4>
&lt;div id="CenterPNG">
&lt;iframe width="300" height="175" src="https://www.youtube.com/embed/COIVYFkjoDc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;/center>
&lt;div class="column">
&lt;center>
&lt;h4>Build a Flutter App without Worrying about Backend on The @ platform &lt;/h4>
&lt;div id="CenterPNG">
&lt;iframe width="300" height="175" src="https://www.youtube.com/embed/QfvuHrtacHs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/iframe>
&lt;/div>
&lt;/center>
&lt;/div>
&lt;/div></description></item><item><title>Docs: What's deprecated in rSDK?</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/deprecations/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/deprecations/</guid><description>
&lt;h2 id="isdedicated-flag">&lt;strong>isDedicated&lt;/strong> flag&lt;/h2>
&lt;p>Apps no longer have to use the &lt;code>isDedicated&lt;/code> flag on &lt;code>at_client&lt;/code> methods. Sync
will be called on a separate connection with the new SDK implementation. App
developers can remove references to the &lt;code>isDedicated&lt;/code> flag.&lt;/p>
&lt;h2 id="syncstrategy">SyncStrategy&lt;/h2>
&lt;p>Apps no longer have to set &lt;code>SyncStrategy&lt;/code> in the preferences. Sync will be
called automatically after any update or delete operation on the &lt;code>at_client&lt;/code>;
Refer to the Sync section below for more details.&lt;/p>
&lt;h2 id="notify-method">&lt;strong>notify&lt;/strong> method&lt;/h2>
&lt;p>The method &lt;code>notify&lt;/code> from &lt;code>AtClient&lt;/code> is deprecated. Use
&lt;code>AtClientManager.notificationService&lt;/code> instance to call &lt;code>notify&lt;/code> method instead.
This method will be taking a positional argument of type &lt;code>NotificationParams&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Usage :&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// Get [AtClientManager] instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">AtClientManager&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// From the [AtClientManager] instance access the `notificationService` instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Using `NotificationService` instance call the `notify` method.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notify&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// With respect to the operation type,
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// the notification will be sent to the server.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">NotificationParams&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forUpdate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">atKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#f57900">value:&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getsyncmanager-method">&lt;strong>getSyncManager&lt;/strong> method&lt;/h2>
&lt;p>The method &lt;code>getSyncManager&lt;/code> used to get the instance of &lt;code>SynaManager&lt;/code> is
deprecated in favor of &lt;code>SyncService&lt;/code>; Can be able to access from
&lt;code>AtClientManager&lt;/code> instance.&lt;/p>
&lt;p>&lt;strong>Usage :&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// Get [AtClientManager] instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">AtClientManager&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Get [SyncService] instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Use this sync service instance wherever
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// you want to perform sync operations.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">SyncService&lt;/span> &lt;span style="color:#000">_syncServcie&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">syncService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="startmonitor-method">&lt;strong>startMonitor&lt;/strong> method&lt;/h2>
&lt;p>The method &lt;code>startMonitor()&lt;/code> from &lt;code>AtClient&lt;/code> has been deprecated in favor
of &lt;code>subscribe()&lt;/code> from &lt;code>NotificationService&lt;/code>. This method gives a back stream
of notifications from the server to the subscribing client. Optionally pass a
regex to filter notification keys matching the regex.&lt;/p>
&lt;p>&lt;strong>Usage :&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#8f5902;font-style:italic">/// Get [AtClientManager] instance.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">AtClientManager&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">AtClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getInstance&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Get [NotificationService] instance from [AtClientManager].
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">NotificationService&lt;/span> &lt;span style="color:#000">notificationService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">atClientManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">/// Subscribe to notificationService.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// Pass optional regex to filter notification
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">/// keys matching the regex as namespace.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">notificationService&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">subscribe&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f57900">regex:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;.myatapp&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Flutter FAQs</title><link>https://devstaging.atsign.wtf/docs/overview/faqs/flutter/</link><pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/faqs/flutter/</guid><description>
&lt;h2 id="flutter-issues">Flutter Issues&lt;/h2>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Encountered Development Errors&lt;/p>
&lt;ul>
&lt;li>The following two links are a temporary solution to easily finding/submitting error solutions, if you have any suggestions, we are happy to hear them!&lt;/li>
&lt;li>If you have a bug/issue, feel free to search for it in this &lt;a href="https://docs.google.com/spreadsheets/d/1e5eiKAHsVj-kVy91R5L_Y85sLD1bYzly1OUAnf1ny2s/edit?usp=sharing">spreadsheet&lt;/a>.&lt;/li>
&lt;li>If the issue you are currently encountering does not exist within the spreadsheet linked above, feel free to submit a new error within this &lt;a href="https://forms.gle/F9BFYMzoXe1wkva67">error submission form&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="flutter-doctor-says-that-android-studio-is-not-installed-but-it-is">Flutter doctor says that Android Studio is not installed but it is&lt;/h3>
&lt;p>&lt;a href="https://stackoverflow.com/questions/59647791/tag-android-studio-not-installed-when-run-flutter-doctor-while-android">Android Studio (not installed) , when run flutter doctor while Android Studio installed on machine - Stack Overflow&lt;/a>&lt;/p>
&lt;h3 id="flutter-doctor-says-that-java-needs-to-be-installed">Flutter doctor says that java needs to be installed&lt;/h3>
&lt;p>Install Java (Recommended version 8)- &lt;a href="https://www.openlogic.com/openjdk-downloads?field_java_parent_version_target_id=416&amp;amp;field_operating_system_target_id=All&amp;amp;field_architecture_target_id=391&amp;amp;field_java_package_target_id=396">Open JDK Downloads&lt;/a>&lt;/p>
&lt;h3 id="flutter-doctor-says-you-have-to-agree-to-licenses">Flutter Doctor says you have to agree to licenses&lt;/h3>
&lt;p>But when you run ‘flutter doctor &amp;ndash;android-licenses’ you get a load of errors that is fixed with - &lt;a href="https://stackoverflow.com/questions/64708446/flutter-doctor-android-licenses-exception-in-thread-main-java-lang-noclass">windows - Flutter Doctor &amp;ndash;android-licenses : Exception in thread &amp;ldquo;main&amp;rdquo;&lt;/a>&lt;/p></description></item><item><title>Docs: @mosphere</title><link>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/mosphere/</link><pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/sample-apps/mosphere/</guid><description>
&lt;p>In real-time, you can send files across any device regardless of your location — with the added benefit of total privacy. You can fearlessly share contracts, tax information, or other confidential information without worrying about your data being stored on a server in the cloud.&lt;/p>
&lt;p>To see a demonstration of @mosphere, refer to the GIF below:&lt;/p>
&lt;p align="center">
&lt;img src="https://devstaging.atsign.wtf/Sample_Apps/atmosphere_walkthrough.gif" alt="atmosphere-walkthrough" />
&lt;/p>
&lt;h2 id="creating-your-own-platform-data-streaming-application">Creating your own @platform data-streaming application&lt;/h2>
&lt;p>Just like any Flutter app, an @platform application requires a little bit of setup before you can get started. Here are those steps:&lt;/p>
&lt;ol>
&lt;li>Add the service file to your app: You can simply copy this service file from our demo &lt;a href="https://github.com/atsign-foundation/at_demos/tree/master/at_hello_world">at_hello_world&lt;/a> application. These files contain helper methods that allow you to implement @protocol functionality with just a couple lines of code.&lt;/li>
&lt;li>Add the configuration file to your app: Again, feel free to copy this from the &lt;a href="https://github.com/atsign-foundation/at_demos/tree/master/at_hello_world">at_hello_world&lt;/a> and @mosphere application. This file contains variables that allow you to use the virtual environment. Make sure that the ROOT_DOMAIN string is set to vip.ve.atsign.zone and you have a unique name for the NAMESPACE of your @pp!&lt;/li>
&lt;li>Copy the dependencies from the &lt;a href="https://github.com/atsign-foundation/at_demos/tree/master/at_hello_world">at_hello_world&lt;/a> and @mosphere pubspec.yaml files and put them into your project.&lt;/li>
&lt;/ol>
&lt;p>We are super glad that you are beginning your journey as an @dev. We highly recommend that you join our &lt;a href="https://discord.gg/55sHTQFxfz">discord&lt;/a> dev community for troubleshooting, dev updates, and much more!&lt;/p></description></item><item><title>Docs: The @platform persistence keystore guide</title><link>https://devstaging.atsign.wtf/docs/archives/guides/persistence-keystore-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/persistence-keystore-guide/</guid><description>
&lt;h3 id="application-data-storage">Application data storage&lt;/h3>
&lt;p>Data for your application is the combination of the device owner’s data with data that has been shared by others.
An @sign owner&amp;rsquo;s data is&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Stored in the the @sign owner&amp;rsquo;s device’s (local) @persistence keystore&lt;/li>
&lt;li>Accessed by others via their internet addressable, always-on, secure, cloud (remote) @server&lt;/li>
&lt;li>Backed up in their secure cloud (remote) @server&lt;/li>
&lt;li>Synchronized between their cloud (remote) @server and any other devices that belong to the owner&lt;/li>
&lt;li>Secured by secret keys which are only stored on the @sign owner&amp;rsquo;s device’s keychain&lt;/li>
&lt;/ul>
&lt;p>Note: The @sign owner&amp;rsquo;s cloud (remote) @server does not hold the owner’s secret key, which is required to make changes to the data. The local @server on the owner’s device must initialize any data changes.&lt;/p>
&lt;p>Data that others have shared with an @sign owner is&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Accessed directly from their secure cloud (remote) @server with full privacy controls so it is always up to date&lt;/li>
&lt;li>Cached on the @sign owner&amp;rsquo;s device’s local keystore if permitted&lt;/li>
&lt;li>Removed from the @sign owner&amp;rsquo;s device’s local keystore automatically according to the permissions set by the owner of the data&lt;/li>
&lt;li>Updated upon change automatically using the notification verb&lt;/li>
&lt;/ul>
&lt;h4 id="how-application-data-is-stored-and-retrieved">How application data is stored and retrieved&lt;/h4>
&lt;p>As mentioned above, data is stored encrypted as a key/value pair. The @Client SDK supports a familiar set of methods to store and retrieve data from an @persistence keystore. You should always keep in mind that the @protocol includes strict privacy controls applied to all data in an @persistence keystore.&lt;/p>
&lt;h4 id="application-access">Application Access&lt;/h4>
&lt;h4 id="apps-can-reason-over-all-of-my-data-in-my-persistence-keystore">Apps can reason over all of my data in my @persistence keystore&lt;/h4>
&lt;p>One super interesting side effect of giving people control of their data and storing it all in one place is that any application that they can choose to reason over any data that they are allowed to access in order to create altogether new user experiences.&lt;/p>
&lt;p>For example, their certified messaging application may contain a thread where a group of people are discussing which movie to go see on Wednesday night. If permitted, this information can also be presented as an event in their certified calendar application as well as a group in their certified contacts application.&lt;/p>
&lt;h4 id="access-within-an-application-namespace">Access within an application namespace&lt;/h4>
&lt;p>Applications that only rely on data within its own namespace can also store data in the @persistence keystore if certified as @protocol compliant. If the data being stored rightfully belongs to the person creating it (which is the case most of the time), then they will have control of how it is used and shared with other entities and applications.&lt;/p>
&lt;h4 id="use-a-separate-persistence-keystore-for-your-application-certification-not-required">Use a separate @persistence keystore for your application (certification not required)&lt;/h4>
&lt;p>If you would like to store application data, you are free to use the @persistence keystore for your persistence if you want to. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.&lt;/p>
&lt;h4 id="authentication-only-no-need-to-use-the-persistence-keystore-certification-not-required">Authentication only, no need to use the @persistence keystore (certification not required)&lt;/h4>
&lt;p>If your application does not require data persistence on behalf of the person using it; for example, if you just want to make sure that your application is licensed to the person using it, then you do not need to get it certified. You may want to get your application certified anyways to advertise that it is privacy compliant and have it included in our list of certified apps.&lt;/p>
&lt;p>For more information about getting your application certified, please see the &lt;a href="https://devstaging.atsign.wtf/dev_tools/certification">Certification&lt;/a> page.&lt;/p></description></item><item><title>Docs: Privacy</title><link>https://devstaging.atsign.wtf/docs/archives/guides/privacy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/privacy/</guid><description>
&lt;h3 id="todo---content">TODO - Content&lt;/h3></description></item><item><title>Docs: Developer Experience</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/dev_exp/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/dev_exp/</guid><description>
&lt;style>
.int{
width: 100px;
height: 100px;
border-radius: 500%;
background-image: url("/dev_exp/intiser.png");
background-repeat: no-repeat;
background-size: contain;
margin-left: 370px;
}
.xa{
width: 100px;
height: 100px;
border-radius: 500%;
background-image: url("/dev_exp/xavier.png");
background-repeat: no-repeat;
background-size: contain;
margin-left: 400px;
}
.kudakwashe{
width: 100px;
height: 100px;
border-radius: 500%;
background-image: url("/dev_exp/kudakwashe.jpeg");
background-repeat: no-repeat;
background-size: contain;
margin-left: 400px;
}
.atsign{
margin-left: 360px;
margin-top: 20px;
margin-bottom: 60px;
font-size: 25px;
}
.quotes{
margin-left: 185px;
margin-top: -30px;
margin-bottom: 100px;
width: 500px;
font-size: 18px;
}
/* Slideshow container */
.slideshow-container {
position: relative;
background: #f1f1f1f1;
}
/* Next &amp; previous buttons */
.prev, .next {
cursor: pointer;
position: absolute;
top: 50%;
width: auto;
margin-top: -30px;
padding: 16px;
color: #888;
font-weight: bold;
font-size: 20px;
border-radius: 0 3px 3px 0;
user-select: none;
}
/* Position the "next button" to the right */
.next {
position: absolute;
right: 0;
border-radius: 3px 0 0 3px;
}
/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
background-color: rgba(0,0,0,0.8);
color: white;
}
/* The dot/bullet/indicator container */
.dot-container {
text-align: center;
padding: 20px;
background: #ddd;
}
/* The dots/bullets/indicators */
.dot {
cursor: pointer;
height: 15px;
width: 15px;
margin: 0 2px;
background-color: #bbb;
border-radius: 50%;
display: inline-block;
transition: background-color 0.6s ease;
}
/* Add a background color to the active dot/circle */
.active, .dot:hover {
//background-color: #717171;
}
/* Add an italic font style to all quotes */
q {font-style: italic;}
@media only screen and (max-width: 882px) {
.slideshow-container{
left: -250px;
}
}
&lt;/style>
&lt;div>
&lt;h3>
&lt;b
>We &lt;i class="fas fa-heart" style="color: #f05f3e">&lt;/i> our Developer
Community!
&lt;/b>
&lt;/h3>
&lt;h4>
&lt;p>See what they have to say about developing on the @platform.&lt;/p>
&lt;/h4>
&lt;br>
&lt;div class="int">&lt;/div>
&lt;div class="atsign">@intiser&lt;i class="fas fa-heart" style="color: #5dadec">&lt;/i>&lt;/div>
&lt;div class="quotes">
&lt;!-- Slideshow container -->
&lt;div class="slideshow-container">
&lt;!-- Full-width slides/quotes -->
&lt;div class="intiser">
&lt;q>I remember seeing Atsign on a flutter event page for the first time and being immediately captivated by its concept, eventually attending all meetings and workshops despite the time difference.
&lt;/q>
&lt;/div>
&lt;div class="intiser" style="display:none">
&lt;q>With the @protocol's unique infrastructure, in-design privacy and off-the-rack backend, a developer has it easy with focusing on other parts of app development and ultimately reduces the overall developemnt time.&lt;/q>
&lt;/div>
&lt;div class="intiser" style="display:none">
&lt;q>After all this time, I think the @platform has come a long way and it will continue to get better and better as time passes. Data privacy will be the most important issue to tackle in the next decade. We are already getting a glimpse of that by seeing the tech giants’ trials. Indesign privacy of @platform makes it unique from others and ensures people are really the owner of their data.&lt;/q>
&lt;/div>
&lt;!-- Next/prev buttons -->
&lt;p>&lt;a class="prev" onclick="plusSlides('intiser', -1)">❮&lt;/a>
&lt;a class="next" onclick="plusSlides('intiser', 1)">❯&lt;/a>&lt;/p>
&lt;/div>
&lt;!-- Dots/bullets/indicators -->
&lt;div class="dot-container">
&lt;span class="dot-intiser dot active" onclick="currentSlide('intiser', 1)">&lt;/span>
&lt;span class="dot-intiser dot" onclick="currentSlide('intiser', 2)">&lt;/span>
&lt;span class="dot-intiser dot" onclick="currentSlide('intiser', 3)">&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="xa">&lt;/div>
&lt;div class="atsign">@xavierchanth&lt;i class="fas fa-heart" style="color: #5dadec">&lt;/i>&lt;/div>
&lt;div class="quotes">
&lt;!-- Slideshow container -->
&lt;div class="slideshow-container">
&lt;!-- Full-width slides/quotes -->
&lt;div class="xavier">
&lt;q>I started out as an @ppathon participant, and worked on my app, @famiy, which is still in production. The End-to-End Encryption and data ownership is the highlight for me. The biggest concern within a family is everything can be extremely private and no one from outside that family should be able to see that information. This is already taken care of for me on the @platform.
&lt;/q>
&lt;/div>
&lt;div class="xavier" style="display:none">
&lt;q>@family began development while the @protocol was still private and not yet open-source. As time progresses, and now the @protocol is public and is being worked on consistently and tirelessly, we’ve been able to revise accordingly to SDK changes and other incredible improvements. &lt;/q>
&lt;/div>
&lt;div class="xavier" style="display:none">
&lt;q>The ecosystem of the @platform is my favourite part. Having hyper-connected applications is huge and makes life of both developers and consumers so much easier.&lt;/q>
&lt;/div>
&lt;!-- Next/prev buttons -->
&lt;p>&lt;a class="prev" onclick="plusSlides('xavier', -1)">❮&lt;/a>
&lt;a class="next" onclick="plusSlides('xavier', 1)">❯&lt;/a>&lt;/p>
&lt;/div>
&lt;!-- Dots/bullets/indicators -->
&lt;div class="dot-container">
&lt;span class="dot-xavier dot active" onclick="currentSlide('xavier', 1)">&lt;/span>
&lt;span class="dot-xavier dot" onclick="currentSlide('xavier', 2)">&lt;/span>
&lt;span class="dot-xavier dot" onclick="currentSlide('xavier', 3)">&lt;/span>
&lt;/div>
&lt;/div>
&lt;div class="kudakwashe">
&lt;/div>
&lt;div class="atsign">@kudakwashe&lt;i class="fas fa-heart" style="color: #5dadec">&lt;/i>&lt;/div>
&lt;div class="quotes">
&lt;!-- Slideshow container -->
&lt;div class="slideshow-container">
&lt;!-- Full-width slides/quotes -->
&lt;div class="kudak">
&lt;q>I remember seeing Atsign on a flutter event page for the first time and being immediately captivated by its concept, eventually attending all meetings and workshops despite the time difference.
&lt;/q>
&lt;/div>
&lt;div class="kudak" style="display:none">
&lt;q>With the @protocol's unique infrastructure, in-design privacy and off-the-rack backend, a developer has it easy with focusing on other parts of app development and ultimately reduces the overall developemnt time.&lt;/q>
&lt;/div>
&lt;div class="kudak" style="display:none">
&lt;q>After all this time, I think the @platform has come a long way and it will continue to get better and better as time passes. Data privacy will be the most important issue to tackle in the next decade. We are already getting a glimpse of that by seeing the tech giants’ trials. Indesign privacy of @platform makes it unique from others and ensures people are really the owner of their data&lt;/q>
&lt;/div>
&lt;!-- Next/prev buttons -->
&lt;p>&lt;a class="prev" onclick="plusSlides('kudak', -1)">❮&lt;/a>
&lt;a class="next" onclick="plusSlides('kudak', 1)">❯&lt;/a>&lt;/p>
&lt;/div>
&lt;!-- Dots/bullets/indicators -->
&lt;div class="dot-container">
&lt;span class="dot-kudak dot active" onclick="currentSlide('kudak', 1)">&lt;/span>
&lt;span class="dot-kudak dot" onclick="currentSlide('kudak', 2)">&lt;/span>
&lt;span class="dot-kudak dot" onclick="currentSlide('kudak', 3)">&lt;/span>
&lt;/div>
&lt;/div>
&lt;br>
&lt;script>
var slideCounter = {
xavier: 1,
intiser: 1,
kudak: 1,
}
// Object.keys(slideCounter).forEach((j) {
// showSlides(j, 0);
// console.log(j);
// });
function plusSlides(styleClass, n) {
slideCounter[styleClass] += n;
showSlides(styleClass, slideCounter[styleClass]);
}
function currentSlide(styleClass, n) {
slideCounter[styleClass] = n;
showSlides(styleClass, slideCounter[styleClass]);
}
function showSlides(styleClass, n) {
var i;
var slides = document.getElementsByClassName(styleClass);
// console.log(`debug => ${slides.length}`);
var dots = document.getElementsByClassName("dot-"+styleClass);
// console.log(`debug => ${dots.length}`);
if (n > slides.length) {slideCounter[styleClass] = 1}
if (n &lt; 1) {slideCounter[styleClass] = slides.length}
for (i = 0; i &lt; slides.length; i++) {
slides[i].style.display = "none";
dots[i].className = dots[i].className.replace(" active", "");
}
var slideIndex = slideCounter[styleClass];
slides[slideIndex-1].style.display = "block";
dots[slideIndex-1].className += " active";
}
// for(var [key, value] in slideCounter) {
// showSlides(key, 1);
// }
&lt;/script></description></item><item><title>Docs: What are the best practices?</title><link>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/best_practices/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/functional_architecture/rsdk_migration/best_practices/</guid><description>
&lt;ul>
&lt;li>
&lt;p>Do not cache instances of &lt;code>AtClient&lt;/code> or any other services in the app code.
Always make use of &amp;ldquo;AtClientManager&amp;rdquo; to get the right instance.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Subscribe to only specific notifications.&lt;/p>
&lt;ul>
&lt;li>Secondary servers send certain system-level notifications to the SDK.
All of these system notifications will not be of interest to the apps.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use response parsers where the app has to deal with raw responses from the
server.&lt;/p>
&lt;ul>
&lt;li>Secondary servers send responses in various forms for various verbs.
Ideally, app developers should not have to know the specific response
format. Response parsers are made available in SDK to parse these
responses and give back simple beans that the app can operate on.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Build feedback loops into the apps when an operation fails&lt;/p>
&lt;ul>
&lt;li>For example, if @X wants to notify @Y, the operation might fail for
many reasons. The SDK would let the caller know the reason for the
failure. It is better to act on the failure in the app code. It could
be as simple as logging it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Do not write any services to optimize the SDK code. There is a good chance
that we are already working on it. Make sure that you raise an enhancement
request for any such requirement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use sync with regex with caution. It is advised to use without regex unless
you are sure about it.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: at_app FAQs</title><link>https://devstaging.atsign.wtf/docs/overview/faqs/atapp/</link><pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/faqs/atapp/</guid><description>
&lt;h3 id="what-are-the-different-flags-that-can-be-used-with-at_app">What are the different flags that can be used with at_app?&lt;/h3>
&lt;h4 id="namespace">Namespace&lt;/h4>
&lt;p>The namespace is the most important flag to include when creating your application.&lt;/p>
&lt;p>When storing keys on the secondary server, the namespace is used to filter the data produced by your app from the other @platform applications.
To create a namespace for your app, make sure to register an @sign from &lt;a href="https://atsign.com">atsign.com&lt;/a> and use that as your namespace. By owning the @sign, you can ensure that you also own the namespace.&lt;/p>
&lt;p>You can specify the namespace with &lt;code>--namespace=YOUR_NAMESPACE_HERE&lt;/code>.&lt;/p>
&lt;h4 id="root-domain">Root Domain&lt;/h4>
&lt;p>By default the root domain is set to prod (production). In the production domain, you can use real @signs to test your application.&lt;/p>
&lt;p>Alternatively you can specify &lt;code>--root-domain=ve&lt;/code> in the command to choose the virtual environment, and test with those @signs instead.&lt;/p>
&lt;h4 id="api-key">API Key&lt;/h4>
&lt;p>When you are ready to publish your application, you can request an api-key for the &lt;a href="https://pub.dev/packages/at_onboarding_flutter">Onboarding Widget&lt;/a>. This api-key will authorize your app when attempting to generate a free @sign within the widget.&lt;/p>
&lt;p>You can specify this with &lt;code>--api-key=YOUR_API_KEY_HERE&lt;/code>.&lt;/p>
&lt;!-- ## Can I Update my at_app configuration?
If you would like to update your environment at any point in time, it is safe to do so. Just specify the options you would like to change.
You can reconfigure your at_app project simply by recalling the `at_app create` command with any of the new flags or adjustments you wish to make. -->
&lt;!--
&lt;div class="pageinfo pageinfo-primary">
&lt;p>Warning&lt;/p>
&lt;ul>
&lt;li>Be careful of using the &lt;code>--overwrite&lt;/code> flag when updating your configuration. This will overwrite any changes you have made to &lt;code>lib/main.dart&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
--></description></item><item><title>Docs: Contributing to an Open-Source GitHub Project</title><link>https://devstaging.atsign.wtf/docs/overview/contributing-open-source-proj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/contributing-open-source-proj/</guid><description>
&lt;h2 id="what-is-an-open-source-project">What is an open source project?&lt;/h2>
&lt;p>For anyone who is new to not just software development but project management in general, an open source project is that of which any person has access to all of the details of the project and are free to utilize it, use it for research purposes, make modifications to it, and even distribute it elsewhere. GitHub of course, being one of the main wellsprings of open source projects!&lt;/p>
&lt;h2 id="how-can-you-contribute-to-an-open-source-project">How can you contribute to an open source project?&lt;/h2>
&lt;h3 id="forking-a-repository">Forking a Repository:&lt;/h3>
&lt;p>What is forking? In simplest terms, forking a project is simply making a copy of it to your own GitHub profile. GitHub allows anyone to fork a repository and this will allow you to do whatever you please with the entire repository without making any actual changes to the real project! Imagine it as taking a picture of a tree. You can make edits to your photo to make the tree look purple or to give it a face, but you won’t make any changes to the actual tree!&lt;/p>
&lt;h3 id="how-to-fork-a-repository">How to Fork a Repository:&lt;/h3>
&lt;p>First, navigate to the home page of the repository you wish to fork. Refer to the screenshot below:&lt;/p>
&lt;p>Here, you can see that we are currently within the atsign-foundation’s ‘&lt;a href="https://github.com/atsign-foundation/at_demos">at_demos&lt;/a>’ repository.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/contributing-project/fork-button.png" alt="fork-button" title="Fork button">&lt;/p>
&lt;p>If you look at the top right corner of the repository’s page, you’ll notice the ‘Fork’ button and a number next to it. That number represents the number of times this specific repository has been forked. Once you select the Fork button, GitHub will prompt you which repository you wish to fork to. My go-to option is typically my own profile, where it will create an entire repository under your profile name so that you may make whatever modifications you wish. After you choose what location you wish to fork to, GitHub will do all of the hard work for you. After a few seconds or so (depending on your Internet connection speed), you’ll find that the entire repository that you forked, is now copied to wherever you told GitHub to fork it! Congratulations! You’ve forked a repository!&lt;/p>
&lt;h3 id="make-modifications-to-the-repository">Make Modifications to the Repository:&lt;/h3>
&lt;p>Now, you can do whatever your heart so desires with the project! Depending on what the project is, you may wish to clone the repository to your local machine using https/, or simply commit changes directly on your forked repository (totally your choice/preference!).&lt;/p>
&lt;h3 id="creating-a-public-key-with-github">Creating a Public Key with GitHub&lt;/h3>
&lt;p>We recommend git cloning the repository using the SSH key option. You can set up your own public keys on GitHub quite easily. If you see below, you will see the Clone options, &amp;lsquo;HTTPS, SSH, and GitHub CLI&amp;rsquo;. Select the &amp;lsquo;SSH&amp;rsquo; option and this will provide you a password-protected SSH key to git clone the repository.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/GitHub-Code-Options.png" alt="GitHub-Code-Options" title="download theme options">&lt;/p>
&lt;p>In order to create a public key on your machine, follow these simple steps:&lt;/p>
&lt;p>Step 1: &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generate Keys&lt;/a>&lt;/p>
&lt;p>Step 2: &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Add Keys to your Github&lt;/a>&lt;/p>
&lt;h3 id="create-a-pull-request">Create a Pull Request:&lt;/h3>
&lt;p>After you are satisfied with the changes you have made to the project and are confident that this change will be beneficial to include, all you now have to do is create a pull request within the project’s real repository. GitHub has made it very simple to create a pull request for comparing forks. Refer to the screenshot below:&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/contributing-project/pull-request.png" alt="pull-request" title="Pull request option">&lt;/p>
&lt;p>You may notice, in the top left corner of the repository, you will see the ‘Pull requests’ option. After selecting this, you will be taken to the Pull Requests page. This page will show you every pull request that has been created for the specific repository. If you see below, there has been one pull request for this repository thus far.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/contributing-project/page-pull-request.png" alt="pull-request-page" title="Pull request page">&lt;/p>
&lt;p>If you are sure you are ready to create a new pull request, simply click the ‘New pull request’ button. This will then navigate you to the compare page. If you followed the above steps, you would want to ‘compare forks’, which will be a small hyperlink as circled below:&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/contributing-project/compare-changes.png" alt="compare-changes" title="Compare changes">&lt;/p>
&lt;p>This will now change the base and head repositories that will be compared. Be sure to select the correct branch of the real project that you wish to make a pull request for. Select the same repository you forked and the correct branch as the ‘base’ repository and ‘base’ branch. You may need to contact the project leader or one of the main developers if you need assistance for which branch you need to make a pull request for. After selecting these, be very careful in selecting the repository that you forked. This will be where you had made the modifications. Select this repository as the ‘head’ repository and ‘compare’ branch.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo//contributing-project/review-mods.png" alt="review-mods" title="Review modifications">&lt;/p>
&lt;p>From here, you will see all of the modifications that will occur if your pull request is accepted. Once you double check all of these modifications and are confident in it, you may now select ‘Create pull request’. You may notice that mine says ‘View pull request’ but that is because I have already gone through this process and have successfully created one.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> Be sure that your contribution will be &lt;u>&lt;b>useful&lt;/b>&lt;/u> for those who utilize the project! If you do end up creating a pull request with your modifications, make sure that those modifications are properly documented in both the code and/or the comment section of the pull request itself.&lt;/p>
&lt;/div></description></item><item><title>Docs: Encryption</title><link>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/encryption/</guid><description>
&lt;p>The @protocol supports end-to-end encryption for all the data handled through it. This is difficult to do, especially for information that is shared with a large number of people and very frequently, so we had to come up with a clever mechanism to make the technology work.&lt;/p>
&lt;p>Let’s describe a simple use case: @alice wishes to share her phone number with her friend @bob. To do this, @alice, who is on her own device, prompts her own secondary server to direct phone@alice at her friend @bob’s secondary server. From here, a shared key is generated for @bob (@bob:shared_key@alice).&lt;/p>
&lt;p>This shared key uses the same encryption process as the Symmetric Key Encryption, which is called AES (Advanced Encryption Standard) and involves three block ciphers: AES-128, AES-192 and AES-256.&lt;/p>
&lt;p>The @protocol specifically uses AES256 for Data Encryption Keys.&lt;/p>
&lt;p>The RSA (Rivest–Shamir–Adleman) encryption algorithm is then used to encrypt the shared key from the above example with @bob’s public key. The @protocl specifically utilizes RSA 2048. Note, that because the RSA algorithm is an Asymmetric Key Encryption method, a public and private key are generated.&lt;/p>
&lt;p>As this is a brief overview as to how encryption works on the @platform, you may read more &lt;a href="https://atsigncompany.medium.com/data-encryption-caching-with-the-protocol-debe9efc0f49">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Our Flutter Community Advisors</title><link>https://devstaging.atsign.wtf/docs/archives/guides/resources/ouradvisors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/archives/guides/resources/ouradvisors/</guid><description>
&lt;style>
.row {
display: flex;
flex-direction: row;
max-width: 100%;
margin-left: -2px;
}
.icons{
font-size:30px;
padding:10px;
color: #F05E3E;
}
.profile_pic {
height: 200px;
width: 200px;
background-repeat: no-repeat;
background-size: contain;
text-align: left;
align: middle;
display: flex;
justify-content: flex-end;
align-items: flex-end;
}
&lt;/style>
&lt;!--Argel Content Start-->
&lt;table >
&lt;tr>
&lt;td rowspan="2" >
&lt;div class="profile_pic">&lt;img src="https://devstaging.atsign.wtf/Advisors/ArgelBejarano.png">&lt;/div>
&lt;/td>
&lt;td rowspan="2" >
&lt;h4>Argel Bejarano&lt;/h4>
&lt;img src="https://devstaging.atsign.wtf/Advisors/locationpin.png" height="2%" width="2%" align="left" padding="10px">&lt;h6>Hermosillo, Mexico&lt;/h6>
Argel is a software engineer with over 10 years of experience. As a Google Developer Expert for Flutter and Dart, he has become a distinguished speaker, writer, and organizer in the Spanish developer communities, with over 30K members in the Flutter &amp; Dart Spanish Community he founded. When he is not on the computer hacking away, Argel is a father, sportsman, and Brazilian Jiu-jitsu practitioner.
Argel contributes extensively to the @platform repository and helps grow the presence of the @platform in the Flutter community.
&lt;div class="row">
&lt;a href="https://twitter.com/ArkangelB">
&lt;i class="fab fa-twitter icons" alt="Argel Twitter" id="Twitterlogo">&lt;/i>
&lt;/a>
&lt;a href="https://github.com/arkangel12">
&lt;i class="fab fa-github icons" lt="Argel Github" id="GHlogo">&lt;/i>
&lt;/a>
&lt;a href="https://mx.linkedin.com/in/argelbejarano">
&lt;i class="fab fa-linkedin icons" alt="Argel LinkedIn" id="LIlogo" >&lt;/i>
&lt;/a>
&lt;a href="https://www.youtube.com/c/communitybrainn">
&lt;i class="fab fa-youtube icons" alt="Argel YouTube" id="YTlogo">&lt;/i>
&lt;/a>
&lt;/div>
&lt;/td>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;!--Argel Content End-->
&lt;!--Majid Hajian Start-->
&lt;table >
&lt;tr>
&lt;td rowspan="2" >
&lt;div class="profile_pic">&lt;img src="https://devstaging.atsign.wtf/Advisors/MajidHajian.jpg">&lt;/div>
&lt;/td>
&lt;td rowspan="2" >
&lt;h4>Majid Hajian&lt;/h4>
&lt;img src="https://devstaging.atsign.wtf/Advisors/locationpin.png" height="2%" width="2%" align="left">&lt;h6>&lt;a> &lt;/a>Oslo, Norway&lt;/h6>
Majid is a Google developer expert and passionate software developer with years of developing and architecting complex web and mobile applications through Flutter, Dart, PWA. He has become a noteworthy presence in the Flutter community by speaking at events, contributing to open source, and organizing meetups and conferences. He’s an award-winning author of Progressive Web Apps and Instructor at Pluralsight.
With Majid's advice, we've built our community of developers and hosted global events to spread awareness of Atsign’s technology.
&lt;div class="row">
&lt;a href="https://twitter.com/mhadaily">
&lt;i class="fab fa-twitter icons" alt="Majid Twitter" id="Twitterlogo">&lt;/i>
&lt;/a>
&lt;a href="http://github.com/mhadaily">
&lt;i class="fab fa-github icons" lt="Majid Github" id="GHlogo">&lt;/i>
&lt;/a>
&lt;a href="https://www.linkedin.com/in/mhadaily/">
&lt;p>&lt;i class="fab fa-linkedin icons" alt="Majid LinkedIn" id="LIlogo" >&lt;/i>&lt;/p>
&lt;/a>
&lt;a href="https://bit.ly/majid-youtube">
&lt;p>&lt;i class="fab fa-youtube icons" alt="Majid YouTube" id="YTlogo">&lt;/i>
&lt;/a>&lt;/p>
&lt;/div>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;!--/Majid Hajian-->
&lt;!--Simon Lightfoot Start-->
&lt;table >
&lt;tr>
&lt;td rowspan="2" >
&lt;div class="profile_pic">&lt;img src="https://devstaging.atsign.wtf/Advisors/SimonLightfoot.jpeg">&lt;/div>
&lt;/td>
&lt;td rowspan="2" >
&lt;h4>Simon Lightfoot&lt;/h4>
&lt;img src="https://devstaging.atsign.wtf/Advisors/locationpin.png" height="2%" width="2%" align="left">&lt;h6> London, United Kingdom&lt;/h6>
It is impossible to talk about the Flutter Community without mentioning Simon. His first encounter with Flutter was in October 2017, and the technology left such an impression on him that he has been working exclusively in Flutter ever since. Today, Simon is the co-founder of various communities such as &lt;a href="https://flutterstudygroup.com/"> Flutter Study Group&lt;/a> and &lt;a href ="https://flutter.dev/community"> Flutter Dev Community&lt;/a>. His efforts have made him one of the most prominent tech figures in the world of Flutter.
He works with the core team at Atsign on developer experience and community building.
&lt;div class="row">
&lt;a href="https://twitter.com/devangelslondon">
&lt;i class="fab fa-twitter icons" alt="Simon Twitter" id="Twitterlogo">&lt;/i>
&lt;/a>
&lt;a href="https://github.com/slightfoot">
&lt;i class="fab fa-github icons" lt="Simon Github" id="GHlogo">&lt;/i>
&lt;/a>
&lt;a href="https://uk.linkedin.com/in/simonlightfoot">
&lt;p>&lt;i class="fab fa-linkedin icons" alt="Simon LinkedIn" id="LIlogo" >&lt;/i>&lt;/p>
&lt;/a>
&lt;/div>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;!--Simon Lightfoot --></description></item><item><title>Docs: Working With Hugo (Static Webpage Generator)</title><link>https://devstaging.atsign.wtf/docs/overview/getting-started-with-hugo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/overview/getting-started-with-hugo/</guid><description>
&lt;h3 id="what-is-hugo">What is Hugo?&lt;/h3>
&lt;p>Hugo is a static site generator that you can read more about &lt;a href="https://gohugo.io/documentation/">here&lt;/a>.&lt;/p>
&lt;h3 id="have-hugo-set-up-already">Have Hugo set up already?&lt;/h3>
&lt;p>Click &lt;a href="https://devstaging.atsign.wtf/docs/overview/getting-started-with-hugo/#set-up-atsigndev-on-your-machine">here&lt;/a> to get atsign.dev running on your machine.&lt;/p>
&lt;h2 id="windows">Windows:&lt;/h2>
&lt;h3 id="installing-hugo-on-windows">Installing Hugo on Windows:&lt;/h3>
&lt;p>There are a few ways in which you can get started with Hugo, however the easiest way I have found to getting started and jumping straight into things is by the following steps:&lt;/p>
&lt;p>Create a directory in a location on your drive. Next, rename this folder to ‘Hugo’. After this, navigate inside of your Hugo folder and create another folder within it, this time calling it ‘bin’.&lt;/p>
&lt;p>You’re now ready to download Hugo on to your machine. As most projects which are open-source can be found on GitHub, so can Hugo’s releases. In any web browser, navigate to the &lt;a href="https://github.com/gohugoio//Hugo/releases" title="GoHugo Resources">GoHugoIo&lt;/a> repository. Here, you will find a great list of all of the releases catered for Windows, Linux, and MacOS. Be sure to select a release that has your operating system in the title. For example, I am using a Windows 10 machine that runs a 64 bit processor. So I navigated to the zip file titled hugo_extended_0.83.1_Windows-64bit.zip.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> The release number may be different from the one listed above due to the time at which this documentation was written.&lt;/p>
&lt;/div>
&lt;p>You may also have noticed that I have chosen the extended Hugo version. Hugo extended has more capabilities, especially for thematic purposes. Hugo&amp;rsquo;s extension comes with a few advantages such as; SASS/SCSS support, Minify javascript and css, resource catenation, source mapping, image processing and so much more. A more in depth view of it can be found &lt;a href="https://www.npmjs.com/package/hugo-extended">here&lt;/a>.&lt;/p>
&lt;p>Once you have found the matching release title for your machine, feel free to simply download the zip file. Where you download the zip file does not matter, however, where you extract it does. When your download is complete, select ‘Extract all’ and be sure that you extract the contents of what you downloaded into the ‘bin’ folder that exists within your Hugo folder. Once the extraction is complete, it should look something like this:&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo_ext_file_location.PNG" alt="bin-folder" title="bin folder">&lt;/p>
&lt;p>For the release that I have downloaded and extracted, there are three files. Perhaps in a later release of Hugo, there may be more files included, but for now, as long as you have the application file titled ‘hugo’, you will be fine. If, for whatever odd reason, the ‘hugo’ file is titled something else, be sure to rename it to ‘hugo’ (note the lowercase ‘h’). There is also a license file and a readme. It is completely up to you if you read the readme and license files.&lt;/p>
&lt;h3 id="determining-if-your-installation-on-windows-was-successful">Determining if your Installation on Windows was successful:&lt;/h3>
&lt;p>To make sure that your Hugo was successfully installed and extracted, open your command prompt [Some ways in which this can be done =&amp;gt; (Win key + r, type ‘cmd’, hit ‘enter’), (Go to your Search bar and the bottom of your taskbar and type in ‘cmd’ or ‘command prompt’ and hit ‘enter’)] and navigate to the directory where you extracted Hugo. For the above picture, my hugo.exe file’s location was D:\Hugo\bin\hugo.exe, so all I have to type is ‘cd D:\Hugo\bin’ and I will be taken to where the hugo.exe exists. If you’re not sure where you had saved your Hugo folder, you can either use the File Explorer you have presently open and simply highlight the path that is in the bar above your currently open Hugo folder. I have circled it below for your convenience.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo_ext_file_location_circled.PNG" alt="file-location" title="file location">&lt;/p>
&lt;p>To show what your command prompt should look like:
&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo_ext_location.PNG" alt="hugo-location" title="cmd location">&lt;/p>
&lt;p>Once you are here, feel free to try the command ‘hugo version’:
&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo_ext_bin_version.PNG" alt="hugo-version" title="hugo version">&lt;/p>
&lt;p>If your command prompt happily prints out the current version of Hugo you have on your machine, this means you have successfully installed and extracted Hugo onto your machine. However, you may notice that if you use the command ‘cd ..’ to move directories to the ‘Hugo’ folder rather than ‘bin’ and try the command ‘hugo version’ you will be hit with an error or Windows will tell you that hugo isn’t a recognized command.
&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo-not-recognized.png" alt="hugo-error" title="hugo error">&lt;/p>
&lt;p>If you are like me, and wish to be capable of using the hugo command anywhere on your machine, maybe because you would like to create a web page with its own folder and its own content, there is an easy way to fix this.&lt;/p>
&lt;p>What you will have to do is navigate to your ‘Search’ bar and type in ‘env’ or ‘environment’. Windows will suggest the ‘Edit the System Environment Variables’. Open it and a System Properties dialog box should appear and look something like this:
&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/env-variables.png" alt="env-variables" title="system properties">&lt;/p>
&lt;p>Double-click on the button labeled ‘Environment Variables’ and this will open the dialog box where you can edit the environment variables of your machine. You may be wondering what environment variables are and what they’re for. In simplest terms, just like how you noticed that your hugo command did not work outside of the bin folder, there are other applications that work the same way and will only work in the folder they exist in. Windows has the capability of allowing you to run the application from anywhere, which is exactly what we would like to do. You should see something in your ‘user variables’ called Path. Each Path that is listed, is more than likely an application, similar to your Hugo, that exists only in a folder but is used globally on your machine. Highlight ‘Path’ and click ‘Edit&amp;hellip;’. This will open a new dialog box that will list the individual paths that already exist. Click ‘New’ and simply type (or paste) the location of your hugo.exe. If you may recall from my example, my hugo.exe was in the following location; D:\hugo_ext\bin.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/Hugo-Path-Edit.png" alt="hugo-path-edit" title="environment variables">&lt;/p>
&lt;p>Here’s what mine looks like after I have finished typing in where it exists (it is the one highlighted in blue). After you have done the same, you can now click ‘OK’ until all of the dialog boxes are closed. Now this is where the magic happens! After restarting your computer, try using the ‘hugo version’ command again outside of the ‘Hugo\bin’ folder and see if Windows recognizes it as a command! I simply started up my command prompt and immediately typed in ‘hugo version’ and it worked. If the command works, you are now ready to get started on a Hugo project.&lt;/p>
&lt;p>&lt;img src="https://devstaging.atsign.wtf/Hugo/getting-started/hugo-version-extended.PNG" alt="Hugo-Version-Outside-Bin" title="hugo version outside bin">&lt;/p>
&lt;h2 id="mac">Mac:&lt;/h2>
&lt;h3 id="installing-hugo-on-mac">Installing Hugo on Mac:&lt;/h3>
&lt;p>The first step you will want to take is navigating to the website &lt;a href="https://brew.sh" title="Homebrew Installation">Homebrew&lt;/a>. This website is a package manager and allows you to install, download and manage packages. You can use &lt;a href="https://brew.sh" title="Homebrew Installation">Homebrew&lt;/a> to install Hugo easily on your computer. Once you are taken to the landing page, you should come across a terminal command that looks like:&lt;/p>
&lt;pre>&lt;code>/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot;
&lt;/code>&lt;/pre>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> This command may be updated depending on any new releases,
so be sure to check the website before copying the line of code above!&lt;/p>
&lt;/div>
&lt;p>Simply paste the line of code into your terminal. Once you click enter and input your password for administrative access, Homebrew will begin installing itself onto your machine. This can take a few minutes. Once Homebrew is finished, you can then type the command:&lt;/p>
&lt;pre>&lt;code>brew install hugo
&lt;/code>&lt;/pre>&lt;p>Homebrew may update itself automatically before installing hugo.&lt;/p>
&lt;h3 id="determining-if-your-installation-on-mac-was-successful">Determining if your Installation on Mac was successful:&lt;/h3>
&lt;p>You can validate your install by the command:&lt;/p>
&lt;pre>&lt;code>which hugo
&lt;/code>&lt;/pre>&lt;p>You can also use the command:&lt;/p>
&lt;pre>&lt;code>hugo version
&lt;/code>&lt;/pre>&lt;p>If you run into an error, be sure to reread the steps carefully as you may have missed something or read through the Hugo set up steps in their own documentation in case this is out dated.&lt;/p>
&lt;h3 id="set-up-atsigndev-on-your-machine">Set up atsign.dev on your machine&lt;/h3>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> Be sure to FORK (not sure how? Follow these &lt;a href="https://devstaging.atsign.wtf/docs/overview/contributing-open-source-proj/#forking-a-repository">steps&lt;/a>) our atsign.dev repo before following these next steps.&lt;/p>
&lt;/div>
&lt;p>Within your command prompt/terminal, navigate to the cloned repo directory and run the following commands to start up your Hugo local server:&lt;/p>
&lt;pre>&lt;code>git submodule update --init --recursive
hugo server
&lt;/code>&lt;/pre>&lt;p>Git submodule update will pull the at_docsy repo&amp;rsquo;s contents and add them to a created folder titled at_docsy under your themes folder. This pulls the layout and theme structure of our developer site. Hugo server will launch a local version of atsign.dev for you.&lt;/p>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>&lt;b> Note: &lt;/b> The hugo server command may fail and there are numerous reasons for this! We have a document that details known issues &lt;a href="https://docs.google.com/document/d/1CZaAHi5IBbKMdg61YRtP5q8iFN0meP8h3mG-fu24xrQ/edit?usp=sharing">here&lt;/a> along with their solutions.&lt;/p>
&lt;/div>
&lt;p>After this, you can now open any web browser and type in the URL:&lt;/p>
&lt;p>&lt;a href="http://localhost:1313">localhost:1313&lt;/a>&lt;/p>
&lt;p>You should now see atsign.dev running on your web browser! From here, if you wish to contrbute, I recommend reading through our &lt;a href="https://devstaging.atsign.wtf/docs/overview/contributing-open-source-proj/">&amp;lsquo;Contributing to an Open-Source Project&amp;rsquo;&lt;/a> document!&lt;/p></description></item><item><title>Docs: Polymorphism</title><link>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://devstaging.atsign.wtf/docs/get-started/understand-the-platform/polymorphism/</guid><description>
&lt;p>Polymorphism on the @platform is the ability to share different data depending on the context of who&amp;rsquo;s asking.
@platform applications enable you to setup multiple personas for different areas of your life.
When you share data with someone else, the value of that data may be different depending on the person receiving that data.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;p>@alice&amp;rsquo;s work persona may have a different value for email than her personal persona.
When she shares her email to her colleagues, they will receive her work email, however when she shares it to her friends and family, they will see her personal email.
As she updates the data in each of her personas, the changes will be reflected to each person that she has shared the data with.&lt;/p>
&lt;p>To learn more about polymorphism see &lt;a href="https://medium.com/flutter-community/building-flutter-apps-with-no-backend-9715b764a81e#67d3">this article post&lt;/a>.&lt;/p></description></item></channel></rss>